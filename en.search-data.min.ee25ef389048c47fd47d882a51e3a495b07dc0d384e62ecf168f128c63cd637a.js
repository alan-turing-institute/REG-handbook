'use strict';(function(){const t={cache:!0};t.doc={id:"id",field:["title","content"],store:["title","href","section"]};const e=FlexSearch.create("balance",t);window.bookSearchIndex=e,e.add({id:0,href:"/REG-handbook/docs/contributing/discussions_and_issues/",title:"Discussions and Issues",section:"Contributing",content:"Discussions and Issues #  Contributing does not only mean adding code or writing pages. Being involved in reporting issues and discussing ideas are important and valuable aspects to contributing. The handbook uses both issues and discussions on GitHub.\nDiscussions #  The handbook Dicussions are the best place for informal talk about the handbook.\nYou should feel welcome to create a discussion on any relevant topic, without the formality of an issue.\nGood examples of discussions are\n Any questions Possible bugs (does anyone else have this problem?) Chapter suggestions Looking for collaborators Community support Any other on-topic talk  Issues #  The issue tracker is best used for development work. This is because issues integrate well with GitHub development tools like projects, pull requests, assignments and so on.\nEach issue should ideally represent a well-defined, self-contained piece of work suitable to become a single pull request.\nGood examples of issues are\n Bug reports with technical detail Developed chapter proposals Feature requests (such as new shortcodes) Specific ideas for changes  When opening an issue, pick a suitable template (if any) to make the process easier.\n"}),e.add({id:1,href:"/REG-handbook/docs/contributing/",title:"Contributing",section:"Docs",content:"Contributing #  This section contains a guide for contributing to the handbook. It is not a comprehensive guide to Hugo or any of the other tools used. Instead it is aimed to be a user-focused guide explaining how add to or edit the handbook without dwelling on the details of the underlying technologies. For those interesting in learning more, links will be liberally placed throughout for further reading.\n"}),e.add({id:2,href:"/REG-handbook/docs/contributing/getting_started/",title:"Getting Started",section:"Contributing",content:"Getting Started #  Install dependencies #  To contribute to the handbook you will need\n Git Hugo (You will need the extended version with Sass/SCSS support) Your favourite text editor  You might also find it helpful to install markdownlint so that you can lint your branch before making a pull request.\nThe linting style used is included in the root of the repository, .mdl_style.rb.\n Clone the repository #  Clone the repository with one of the following options (depending on how you authenticate with GitHub):\nSSH authentication git clone --recurse-submodules git@github.com:alan-turing-institute/REG-handbook.git cd REG-handbook HTTPS authentication git clone --recurse-submodules https://github.com/alan-turing-institute/REG-handbook.git cd REG-handbook  The --recurse-submodules flag is important as the handbook\u0026rsquo;s theme is included as a Git submodule\nServe the handbook locally #  While working on the handbook, it will be useful to preview your changes locally. To do this use Hugo\u0026rsquo;s server command\nhugo server --minify In the output of this command will be a line similar to\nWeb Server is available at http://localhost:1313/REG-handbook/ (bind address 127.0.0.1) which contains the URL of the locally served site. Navigate to this address in your browser to preview the handbook.\nThe Hugo server will monitor the files in the repository and automatically rebuild the site whenever you make changes. This is a useful tool to immediately view your changes.\n"}),e.add({id:3,href:"/REG-handbook/docs/how_we_work/",title:"How we work",section:"Docs",content:"How We Work #  "}),e.add({id:4,href:"/REG-handbook/docs/how_we_work/meeting_record/",title:"Meeting Records",section:"How we work",content:"Meeting Records #  When a synchronous meeting is unavoidable, it is critical to produce a clear and thorough record.\nThe meeting record is important as a reference for what happened at the meeting. In particular, any decisions made or actions assigned need to be clearly recorded for future reference.\nA good record will also be invaluable to anyone who was not able to attend an in person meeting.\nMeeting Record Template #  Below is a suggested template for a meeting record document. The template uses Pandoc Markdown. Parts of the template are already filled with explanations of how they should be used.\n--- title: Short meeting title date: yyyy-mm-dd author:  - List of authors of the this record abstract: |  Summary of meeting purpose. Should help readers decide whether they need to  read the record. keywords: [] # Pandoc LaTeX variables papersize: a4 fontfamily: fourier fontsize: 12pt colorlinks: true ---  # Meeting Record  ## Agenda  1. Itemised Agenda 1. Should be agreed in advance  ## Present  - List of people present  ## Notes  - Summary of discussion points - Use subsections if appropriate  ## Decisions  - Record any decisions made during the meeting  ## Actions  | Owner | Action | |-------|--------| | | |  For printing or wider distribution, a meeting record following the template may be converted to pdf using Pandoc,\npandoc meeting_record.md -o meeting_record.pdf A Pandoc YAML metadata block at the top of the template contains metadata about the meeting and helps the record render into a good looking pdf document.\nHow To Use #   Create the meeting record document before the meeting. Use a collaborative text editor like HackMD so that all attendees may edit the document. Circulate the document to allow others to add and agree on agenda items. Distribute the record or store in a location visible to everyone who may need to read it.  The template may also be used to avoid a meeting entirely. The document can be completed collaboratively and asynchronously while achieving the same result.\n"}),e.add({id:5,href:"/REG-handbook/docs/contributing/creating_a_page/",title:"Adding New Content",section:"Contributing",content:"Adding New Content #  How Hugo Arranges Content #  Pages are build from content files in the content/ directory. Hugo automatically gives pages a URL based on the organisation of files in the content/ directory.\nIn Hugo, the first directory after content/ is significant and defines the content type. All handbook pages should be nested in the content/docs/ directory.\nSections may be created in content/docs/ (to any depth) by creating a directory containing a content file called _index.md.\nIt is important that the index file exists for Hugo to correctly assign pages to sections and for the theme to arrange pages in the tree-like menu.  Creating a New Page #  To create a new handbook page use the hugo new command.\nhugo new content/docs/\u0026lt;path/to/page\u0026gt;.md If you wanted to create this page, you would type\nhugo new content/docs/contributing/creating_a_page.md Hugo will create a new Markdown document at the path you specified.\nHugo provides a convenient way to new pages from templates called Archetypes. You can see the archetypes in the archetypes/ directory .\nBecause your document is in the docs directory, Hugo will look for an archetype called docs.md to use as a template.\nNow you can edit your page with your favourite text editor. For example\nvim content/docs/contributing/creating_a_page.md Creating a Section #  We can also use the hugo new command to create a new section, both the directory and index file. For example\nhugo new content/docs/new_section/_index.md vim content/docs/new_section/_index.md If you only want a section to organise some pages and not to have a page of its own, you can simply leave the content section of _index.md (after the YAML front matter) empty.\n"}),e.add({id:6,href:"/REG-handbook/docs/contributing/editing_a_page/",title:"Editing a Page",section:"Contributing",content:"Editing a Page #  If you followed the instructions in the Getting Started section to checkout the repository and serve the handbook locally you can edit a page locally. However, as you may have noticed, at the bottom of each page is a link to edit the page in the GitHub web editor if you would prefer. This may be easy for making small changes.\nPages #  Each page is a Markdown file with YAML front matter followed by the page contents in Markdown.\nFront Matter #  The front matter is used to define various pieces of metadata related to a page. The front matter appears at the top of a content file. In the handbook we format front matter as YAML, preceded and followed by three hyphens.\n--- title: \u0026#34;Example Page\u0026#34; weight: 1 --- The full YAML specification is long and comprehensive. The most important thing to understand here is that the front matter YAML consists of keys and values separated by a hyphen. For example, in the expression weight: 1, weight is the key with a value of 1.\nIf you created a page using hugo new then some boilerplate front matter with explanatory comments should already be present. If you are editing an existing page there should already be front matter.\nMost of the time, the only keys you will need to consider are title and weight.\n title The title of a page as it appears in the navigation menu weight Determines the order of pages in the navigation menu. Smaller numbers appear first  The Hugo documentation details a set of predefined front matter keys. Other valid fields related to the handbook theme are documented in the theme\u0026rsquo;s README.\nContent #  After the front matter is the content section.\n--- title: \u0026#34;Example Page\u0026#34; weight: 1 ---  | content section | The content section is formatted in Markdown. Markdown Guide outlines the basic and extended.\nNot all of the extended Markdown syntax may be implemented by Hugo\u0026rsquo;s Markdown renderer  Shortcodes #  Shortcodes are templates (which can be parametrised) and included the content section. They can be particularly useful for including more complex features than Markdown\u0026rsquo;s simple syntax will allow. Using a shortcode is preferable to including raw HTML in a content file.\nShortcodes can called in Markdown content files the following way\n{{% shortcode parameter %}} Some shortcodes may have an opening and closing tag, similar to HTML\n{{% shortcode %}} content to process {{% /shortcode %}} Hugo Shortcodes #  Hugo has a set of useful built-in shortcodes.\nIn particular\n figure gist highlight param ref and relref  Theme Shortcodes #  The theme has a number of shortcodes which may be helpful.\nIn particular\n hints expand KaTeX tabs  Repository Shortcodes #  Shortcodes can be included in the handbooks repository. For more information see Creating Shortcodes\nrepo_link #  Create a link to a file or directory in the handbook\u0026rsquo;s repository.\n{{% repo_link target=\u0026#34;README.md\u0026#34; text=\u0026#34;README\u0026#34; %}}  target Path to the file or directory relative to the root of the repository text Text of the link (can include Markdown formatting)  "}),e.add({id:7,href:"/REG-handbook/docs/contributing/contributing_changes/",title:"Contributing Changes",section:"Contributing",content:"Contributing Changes #  Once you have made changes, you will need to contribute them back to the remote repository. This page explains the process of pushing your changes back to the remote, and how your contribution will be checked in the CI and review process.\nThe handbook users the GitHub flow workflow. In short\n create a branch make changes open pull request review merge to main  This workflow should help changes be deployed quickly.\nWhen making commits, follow Tim Pope\u0026rsquo;s recommendations for good commit messages.  Creating a Branch #  You should make your changes on a new branch, and not on main. This will make it easier to merge changes from many contributors. Try to pick a branch name which is short and describes the change you are making.\nThe changes on one branch or pull request should address a single issue and be self-contained. Don\u0026rsquo;t try to solve more than one unrelated problem at once.\nSticking to this practice will help ensure pull requests are small and easy to review. Otherwise, you might end up having to make many changes during review, have difficultly keeping your branch up to date or upset the reviewers.\n Opening a Pull Request #  When you think your changes are ready to be merged, open a pull request. If you don\u0026rsquo;t want your changes to be merged yet but would like some feedback, you can open a draft pull request.\nWhen you open a pull request you will be presented with a template. Complete the sections and answer the questions as best you can. In particular, make sure to reference any issues your work closes or is related to.\nContinuous Integration #  A series of tests will be automatically conducted on each commit and pull request. The tests are defined in ci.yaml .\nThe following tests are required to pass before merging a pull request\n A Markdown linter A Hugo build  There are other test that are not required before merging, although you should aim to pass all tests. Those are\n A Markdown link checker A HTML proofer (including link checking) on the output of Hugo  Keeping Your Branch up to Date #  The branch protection rules applied to main will prevent merging out-of-date branches. This means if your branch doesn\u0026rsquo;t include the changes from the HEAD of origin/main it won\u0026rsquo;t be possible to merge it.\nIf your branch isn\u0026rsquo;t up to date, you can fix it with a merge or rebase.\nMerging #  Merging the changes from origin/main is probably the simpler way to get your branch up to date. It will leave the Git history a bit messier which can bother some people.\nEnsure you have the latest changes on origin/main in your local repository\ngit fetch Merge origin/main into your branch. If your branch was called my_branch you would run\ngit switch my_branch git merge origin/main Git will notify you of any conflicts. If there are conflicts you should fix them before running git merge --continue to commit.\nAfter you are done you can push your changes.\nRebasing #  Rebasing your branch on top of origin/main can make conflicts more difficult or confusing to deal with.\nEnsure you have the latest changes on origin/main in your local repository\ngit fetch Apply your commits on top of origin/main. If your branch was called my_branch you would run\ngit switch my_branch git rebase origin/main If you want to tidy up your commits or messages you might want to use git rebase -i.\nGit will notify you of any conflicts. If there are conflicts you will need to fix them iteratively, running git rebase --continue to apply each commit.\nWhen the rebase is done, you will need to force push your changes as you have rewritten the history of your branch.\ngit push -f Rewriting history is considered impolite on a branch where you are working collaboratively. It can cause problems when the state of a remote changes unexpectedly.  The Review Process #  Once your pull request has been submitted the handbook maintainers will be prompted to make a review. Each pull request requires at least one approval from the maintainers before merging. If a reviewer requests any changes or makes any comments, these must be resolved before the pull request can be merged.\n"}),e.add({id:8,href:"/REG-handbook/docs/contributing/reviewing_changes/",title:"Reviewing Changes",section:"Contributing",content:"Reviewing Changes #  The review process helps to ensure high quality and catch problems in contributions. When acting as a reviewer, you should see your position as sharing your knowledge and working with the contributors to achieve the best possible result. Reviewing should not be an adversarial process.\nCode Quality #  As a reviewer, one of your jobs is to ensure the quality of the codebase remains high.\nThe CI process will help to assess pull requests by subjecting each commit to a series of tests. Some tests are required to pass and will block merging until they do.\nOther tests are allowed to fail. This is because these tests check external hyperlinks which can fail for reasons out of our control. For example, a website being offline or a rate limiting API. However, you should always aim to have all tests passing and investigate why any test fails. In particular, a genuinely incorrect link should not be ignored.\nYou should always clone the branch, build the handbook locally (using hugo server --minify) and inspect the changes using your browser. Not all bugs will be caught by CI and not all changes will be obvious in the source files.\nReviewing the Pull Request #  Use the GitHub review system to check the diffs of all source files.\nYou should make use of line comments where you have comments or questions about particular lines of sections. This gives context so that everyone knows where the problem is or what the question refers to.\nLine comments can also be used to suggest changes (using the ± button). You should do this when you have a simple solution. This is an excellent way to share knowledge.\nWhen you are finished, submit your review making sure to choose \u0026ldquo;comment\u0026rdquo;, \u0026ldquo;approve\u0026rdquo; or \u0026ldquo;request changes\u0026rdquo; as appropriate.\nChanges #  If you request changes, the pull request will enter an iterative process where the contributors make adjustments you repeat the review process.\nThe contributors may accept your proposed changes, make their own changes or push back against changes. All of these may be appropriate. It is important to work together with the contributors to resolve any conversations. All conversations must be resolved before merging.\nMerging #  Update your review status to \u0026ldquo;approve\u0026rdquo; when you are happy with the state of the pull request. When all reviewers are satisfied, merge the pull request.\n"}),e.add({id:9,href:"/REG-handbook/docs/contributing/advanced/",title:"Advanced",section:"Contributing",content:"Advanced #  Using Data #  Through using templates Hugo can build page content from datafiles. This is particularly useful for when you want to display structured data in a page and when it would be easier to maintain a datafile rather than a Markdown or HTML document.\nCreating Shortcodes #  It is possible to create your own shortcodes. These should be placed in layouts/shortcodes/ .\nIf you feel the need to use HTML or want to create page content from a datafile (like a YAML file or csv) then a shortcode is probably the right answer.\nYou should refer to Hugo\u0026rsquo;s templates and functions documentation for resources to help writing a shortcode.\nPartial Templates #  Whole page templates are built from of a number of smaller partial templates. This approach reduces repeated code in templates and help keep making changes simple.\nThe theme defines a number of dummy partial templates for us to overwrite.\nFor example, the Creative Commons notice at the bottom of each page was added by editing layouts/partial/docs/inject/footer.html .\n"})})()