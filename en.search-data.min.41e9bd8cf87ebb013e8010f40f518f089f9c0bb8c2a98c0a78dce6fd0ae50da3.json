[{"id":0,"href":"/REG-handbook/docs/contributing/discussions_and_issues/","title":"Discussions and Issues","section":"Contributing","content":" Discussions and Issues # Contributing does not only mean adding code or writing pages. Being involved in reporting issues and discussing ideas are important and valuable aspects to contributing. The handbook uses both issues and discussions on GitHub.\nDiscussions # The Discussions on the handbook repository are the best place for informal talk about the handbook.\nYou should feel welcome to create a discussion on any relevant topic, without the formality of an issue.\nGood examples of discussions are\nAny questions Possible bugs (\u0026lsquo;does anyone else have this problem?\u0026rsquo;) Chapter suggestions Looking for collaborators Community support Any other on-topic talk Issues # The issue tracker is best used for development work. This is because issues integrate well with GitHub development tools like projects, pull requests, assignments and so on.\nEach issue should ideally represent a well-defined, self-contained piece of work suitable to become a single pull request.\nGood examples of issues are\nBug reports with technical detail Developed chapter proposals Feature requests (such as new shortcodes) Specific ideas for changes When opening an issue, pick a suitable template (if any) to make the process easier.\n"},{"id":1,"href":"/REG-handbook/docs/contributors/","title":"Contributors","section":"Docs","content":" Contributors # In this table we try to capture everyone who has contributed to the project and how they have contributed. The table is generated and maintained using All Contributors.\nAndy Smith\n🖋 👀 🤔 💻 🎨 Christina Last\n🖋 David Beavan\n🤔 👀 🖋 🚧 David Llewellyn-Jones\n🖋 🤔 🐛 📖 👀 🚧 David Salvador Jasin\n🖋 🤔 👀 🚧 Ed Chalstrey\n🤔 🚧 Ed Chapman\n🤔 🚧 Federico Nanni\n🖋 🤔 Gabriel\n🖋 🤔 Isabel Fenton\n👀 🤔 🚧 Jack Roberts\n🖋 James Robinson\n🖋 Jim Madge\n💻 🖋 📖 👀 🤔 🚇 🐛 Jonathan Yong\n🖋 🤔 🚧 👀 Katriona Goldmann\n🖋 👀 🤔 🚧 Levan Bokeria\n🐛 🖋 🤔 🚧 Lydia France\n🖋 🤔 🚧 Malvika Sharan\n🤔 Markus Hauru\n🖋 🤔 👀 🚧 Martin O'Reilly\n🤔 Matt Craddock\n🤔 🚧 Nathan Simpson\n🤔 🚧 Oscar T Giles\n🤔 Radka Jersakova\n🖋 Roly Perera\n🤔 Rosie Wood\n🤔 🚧 Ryan Chan\n🖋 Tim Hobson\n🖋 griff-rees\n🤔 helenashowell\n🖋 🤔 martin\n🖋 🤔 🚧 nbarlowATI\n🤔 "},{"id":2,"href":"/REG-handbook/docs/contributing/recognising_contributions/","title":"Recognising Contributions","section":"Contributing","content":" Recognising Contributions # We aim to recognise all contributions to the handbook, not just those made through commits. For that purpose we use All Contributors to help manage a record of who has contributed to the book and how.\nUse the \u0026lsquo;add\u0026rsquo; command in an issue or pull-request comment to ask @all-contributors to add a contributor\n@all-contributors please add @\u0026lt;username\u0026gt; for \u0026lt;contributions\u0026gt; See the bot usage documentation for full details and more examples. A list of contribution types (and the related emoji) can be seen here.\n"},{"id":3,"href":"/REG-handbook/docs/working_at_the_turing/booking_a_meeting_room/","title":"Booking a Meeting Room","section":"Working at The Turing","content":" Booking a Meeting Room # There are instructions on how to book a room on Mathison.\nThe simplest way of finding a room is to use the Scheduling Assistant on a meeting invite.\nThen scroll down to Add Location. This will give you a list of Available Rooms for your specific time. It will update when you move the time window.\n"},{"id":4,"href":"/REG-handbook/docs/onboarding/buddy_system/","title":"Buddy System","section":"Onboarding","content":" Buddy System # It can be daunting starting a new job, especially remotely where there is sometimes less opportunity for casual questions. To help with this every new employee should be assigned buddies. The buddies are responsible for providing informal friendly faces to offer advice, guidance, and encouragement on any aspect of working within REG and ARC.\nWe also emphasise that the buddies should be a safe space where new-starters can get help with any technical questions that they feel is silly or trivially easy and may not feel comfortable admitting to the wider group.\nThe Process # Before the new starter starts at the Turing they should be assigned two buddies from our buddy pool. If possible, the buddies should not be assigned to the projects on which the new starter is likely to work, and ideally at a similarly seniority to the new starter.\nWe would also like for each new starter to have a third buddy from some other team. We think that in a remote \u0026amp; hybrid setting it will help new-starters meet people and get a feel for the wider Turing ecosystem. This has been trialed in a few instances, to positive feedback, but to make this be standard practice we would need it to be more bidirectional, with REGers volunteering to buddy with people outside of REG.\nThe new-starter should be made aware of the buddies\u0026rsquo; role before they start, and meeting their buddies should typically be the first appointment on their first day.\nThe buddy system in managed by the person in charge of onboarding.\nBuddy Guidelines # Have a coffee with the new employee on their first day. If needed, introduce them to the team at welcome coffee. Be as informal as possible, make the new starter feel welcome and comfortable. Make sure the new starter is familiar with the New Starter page. Check for sticking points. Meet the new starter where they are at. Make it clear that the new employee can get in touch any time for questions and concerns, regardless of triviality. Emphasise that you\u0026rsquo;re also there for technical pointers. This is to encourage the new-starter to be comfortable asking for help when they are stuck and hopefully lessening imposter syndrome anxiety. Have a check-in chat with the new starter at least once in the first couple of weeks, and again a few weeks after. During these check-ins, uncover pain points and concerns. Help socialise the new employee to the group\u0026rsquo;s culture and processes. Be open, honest, and respect confidentiality. If needed, help make introductions. Tips for Buddies # Don’t worry about being perceived as the expert. Focus your attention on the new employee. Be patient: It takes time to develop a relationship. Don’t try to cover everything right away. Be positive: New employees will grow into their roles if given proper reinforcement. Don’t try to force a relationship. New employees will vary in how much they turn to a buddy. Try to identify the new employee’s personality and communication style and adapt accordingly. Don’t be judgemental. Simply offer feedback. Maintain a good attitude and a teaching spirit. How to be a Buddy # Being a buddy can be a rewarding process. You will help avoid new starters feeling at sea and reaffirm their decision to join the group. To sign up please add your name to our buddy pool.\n"},{"id":5,"href":"/REG-handbook/docs/working_at_the_turing/expenses/","title":"Expenses","section":"Working at The Turing","content":" Expenses # Out-of-pocket expenses should be reclaimed using Certify. You should submit an expense claim on Certify for expenses incurred within a given month as soon as possible, and no later than 60 days after the expense is incurred (except for visa costs, which can be claimed up to a year after starting employment).\nIn the first instance, look at the information provided by the Finance team about how to use Certify on Mathison:\nhttps://mathison.turing.ac.uk/Interact/Pages/Content/Document.aspx?id=2169\n(This also includes links to Certify\u0026rsquo;s own user guides and videos)\nRelated content # REG-specific information Certify Guidance on Mathison REG-specific Finance codes REG-budget-and-project-codes Cost recovery model (REG access only) "},{"id":6,"href":"/REG-handbook/docs/onboarding/new_joiners/first_few_days/","title":"First Few Days","section":"New Joiners","content":" First Few Days # Welcome!\nWe are super pleased that you\u0026rsquo;re joining our group. This page gives you an overview of what to expect from your first few days. They are maintained by the group, we hope that new-starters feel empowered to edit them if there are useful changes to be made.\nIntroductions # Each new starter gets assigned two buddies to be friendly points of contact. The person in charge of onboarding should let you know who these are a bit before you start; If that doesn\u0026rsquo;t happen, please email them about it. Your buddies will welcome you on the first day. In the first few days there will be a welcome coffee to give you a chance to introduce yourself to the whole REG team, and within the first few weeks you will also have a 1-on-1 meeting with REG\u0026rsquo;s Director.\nYou will have a week or so before you will be assigned to a project. Please use this time to do admin stuff, set up your laptop and tools, get to know people, read this handbook and our internal wiki, and shadow meetings (see below). Here we go over the main points you should remember to do, but for an attempt at listing all the small tasks that occupy a new starter, please see (and improve!) this checklist.\nWe also have a page of tables available with information about links and resources related to REG and the Alan Turing Institute.\nAdministrivia # HR will set up a meeting with you to discuss general information e.g. pay, health, leaves, benefits. IT will also meet you to discuss accounts and Turing wide systems. Both of these will typically take place in the first day or two.\nWe have a dedicated page for various systems REG uses. Have a look at the high priority section on your first day.\nWe also have a Remote Working page for Zoom, Teams, and Gather.\nREG offers new starters the opportunity to shadow meetings across the group to meet people and get a feel for how we work. The shadowing document should be updated with meetings you are free to come and listen in on, if it hasn\u0026rsquo;t been please bug the person in charge of onboarding.\nTo access the office you will need a British Library pass. To get a British Library pass you will need to go through the background screening check. Hopefully that process will have been completed by the time you start, but if it hasn\u0026rsquo;t even been started yet (this happens), please talk to HR to make sure the process gets going. Once the screening is done, HR should let you know within a few days that your pass is ready.\nIn the meanwhile, you can either enter the British Library through the general public entrance and come talk to the Turing\u0026rsquo;s reception, or, preferably, arrange for a visitor pass for yourself for the days when you\u0026rsquo;re coming in. For the first day or two, ask your line manager to take care of this, once you\u0026rsquo;ve got your Turing account going you can directly ask reception.\nThe password for the \u0026ldquo;ATI Guest\u0026rdquo; Wi-Fi network can be seen hanging around the office. IT can arrange access to the Eduroam network. Eduroam credentials can be used to access Wi-Fi at many academic institutions.\nPlease also write a short, informal paragraph about your background for to be put into the next REG newsletter, and send it to the newsletter owner.\nOverview of How REG Operates # Work at REG revolves around projects and service areas. You will typically be assigned to two different projects at any time, with at least one other REG person and usually some external collaborators. You may want to browse REG\u0026rsquo;s portfolio of projects in the project tracker to get an idea of what we\u0026rsquo;re up to. The project tracker is also used for expressing preferences on which upcoming projects you would like to work on, but you don\u0026rsquo;t have to worry about that for first few weeks. We very much encourage REG members to learn new things, so feel free to choose projects that sound interesting to you even if they are unfamiliar. Check this section of the handbook for more details.\nService areas are REG-internal work, such as looking after this handbook, organising recruitment, or managing our computational resources. Usually people contribute to one service area, which should take approximately half a day a week. This, too, is something you don\u0026rsquo;t have to think about for now, but come back to it once you\u0026rsquo;ve settled into your workflow with a project.\nREG also gives its members some time, known as 22 days time, to work on side projects they find interesting. Your line manager can give you the details on this.\nIf you like, you can see our team reporting structure. Note, however, that we do not have a hierarchical culture, and line managing relations are not about assigning work to people. Your work tasks will be coordinated with the people in your projects.\nYou should talk to your line manager about things such as\nHow project allocation works, and what kinds of projects you would like to work on Managing your time and growth How we work (practices, tools, languages, etc.) How you would like to grow and develop in your role and what opportunities exist to support that. Please also take a some time to browse this handbook, it\u0026rsquo;s got plenty of useful information about what we do and how we do it.\nSet up Your Machine and Coding Environment # See systems setup.\nRegular Events # Check out our regular events and coffee breaks. Please consider signing up for a tech talk sometime in your first six weeks. If you don\u0026rsquo;t see a calendar invite for the weekly tech talks, ask the person in charge of onboarding to add you to the relevant mailing list.\nWhat to do next # If you\u0026rsquo;ve done all the above, read through the handbook and the repo and are still waiting for your first project to start, go and talk to the person in charge of onboarding. They will find something meaningful for you to do which might be something like:\nBrowse the Project tracker and emoji any projects in the Finding people and Awaiting go/no-go columns. Note: you will be notified to do this before being assigned to a project. Browse the Service areas list, discuss the different areas with people involved and emoji those that are looking for people. Work on a Turing Data Story. There\u0026rsquo;s always a story to join or a new one to start. You can then keep working on it on your 22 days time once allocated to a project. This option has been very popular. Tackle a GitHub issue marked with the good first issue tag in a repo that REG works on. Whenever a new starter is looking for things to do, the person in charge of onboarding will send a message on Slack asking everyone to tag suitable issues. Work on a REG-internal project that is easy to rotate in/out of. Any ad hoc ideas that come up. Maybe you found a project that really interests you and want to help, or maybe there\u0026rsquo;s some team organisational thing that comes up that you volunteer for. Points of Contact # You can find useful points of contact here. This page also holds other useful information such as remote meeting details and team responsibilities.\n"},{"id":7,"href":"/REG-handbook/docs/contributing/getting_started/","title":"Getting Started","section":"Contributing","content":" Getting Started # Install dependencies # To contribute to the handbook you will need\nGit Hugo (You will need the extended version with Sass/SCSS support) Your favourite text editor Optionally pre-commit; see Making Changes for more details. Clone the repository # Clone the repository with one of the following options (depending on how you authenticate with GitHub):\nSSH authentication git clone --recurse-submodules git@github.com:alan-turing-institute/REG-handbook.git cd REG-handbook HTTPS authentication git clone --recurse-submodules https://github.com/alan-turing-institute/REG-handbook.git cd REG-handbook The --recurse-submodules flag is important as the handbook\u0026rsquo;s theme is included as a Git submodule.\nServe the handbook locally # While working on the handbook, it will be useful to preview your changes locally. To do this use Hugo\u0026rsquo;s server command\nhugo server --minify In the output of this command will be a line similar to\nWeb Server is available at http://localhost:1313/REG-handbook/ (bind address 127.0.0.1) which contains the URL of the locally served site. Navigate to this address in your browser to preview the handbook.\nThe Hugo server will monitor the files in the repository and automatically rebuild the site whenever you make changes. This is a useful tool to immediately view your changes.\n"},{"id":8,"href":"/REG-handbook/docs/how_we_work/knowledge_sharing/","title":"Knowledge Sharing","section":"How we work","content":" Knowledge Sharing # This page lists the tools, resources and activities that REG has to promote general communication as well as sharing and gaining knowledge across the team (and the Turing as a whole), and some thoughts on what we could try to improve this. If you\u0026rsquo;re looking to learn something new, get help with a problem, share something cool you\u0026rsquo;ve been doing, or find out what others in the team are doing, the list below may give an idea of where to look/what to try.\nIf you\u0026rsquo;d like to organise something the best options are usually to post to Slack and the Hut23 mailing list (see below).\nDaily # Github Hut23 Repo # We use GitHub (and a couple of related tools) extensively for tracking projects and other tasks within the team. There is a separate page describing how we use them.\nCoffee Breaks # We have coffee breaks on Gather twice daily. See the Regular Events page for details. If the times aren\u0026rsquo;t convenient and you fancy a break then try posting on Slack and the chances are that there\u0026rsquo;ll be others that fancy a break too.\nSlack # Slack is our main tool for informal messaging and announcements (there\u0026rsquo;s some info on how to join on here). It\u0026rsquo;s also a good place to ask for help. Channels of interest include:\n#hut23: Our channel for the REG team (ask someone to add you if you don\u0026rsquo;t have access) #tps: Channel for the tools, practices and systems (TPS) community at the Turing #askaway: Place to ask general questions (e.g. that don\u0026rsquo;t fit in a specific channel) #interesting-events, #general, #social, #random: General chat and announcement about what\u0026rsquo;s happening around the Turing. We use Geekbot, which is a Slack App. We use this in two different ways (both are voluntary):\nA virtual daily standup: Geekbot asks what you\u0026rsquo;re planning to do each day, what you\u0026rsquo;ve achieved and if there is anything you are stuck on. This can be useful for your own planning, but also helps give an overview of the range of other work and skills within the team. Ice breaker-style questions a few times a week. To join in with the use of Geekbot, you will need to first add the Geekbot app to Slack and then join these slack channels #hut23standup and #hut23standup-tasks.\nWeekly # Tech Talks # See here.\nReading Groups # See here.\nApproximately Monthly # REG Team Meetings # Roughly once a month we have an all-REG meeting where we welcome new joiners and a few people briefly present news from around REG or the Turing. This is usually followed by a discussion on a topic of interest for the wider team. If you don\u0026rsquo;t have the calendar invites (new joiners might not initially) ask someone else in the team to forward them to you.\nTuring Events # The main focus of this page is what we do in REG, but there are many things happening around the Turing that REG members are also encouraged to attend, including:\nTuring Catchups \u0026amp; Town Halls — Regular meetings open to all staff with updates from around the institute. New starters may not have the calendar invites initially — ask others in the team to forward the details if you\u0026rsquo;re unsure. Turing Events - often public talks \u0026amp; workshops. Open Source Hacksessions # See here.\nREG Newsletter # We have a monthly REG newsletter which is usually sent around about a week before the monthly team meeting. It contains short project updates and other news/updates from around the team and the institute. It comes to the Hut23 mailing list (see above). If you have something you\u0026rsquo;d like to be included contact the newsletter owner.\nHut23 Mailing List # You should automatically be added to the Hut23 mailing list when you join REG (if not ask your line manager about it). This is often the best way to contact everyone in the team when organising events, or for other news/communication that should be a bit more permanent/formal than Slack and doesn\u0026rsquo;t fit in an issue in the Hut23 repo.\nLess frequently or ad-hoc # Data study Groups # Data study groups (DSGs) are week-long hack sessions on different projects that happen a few times a year. Participants are drawn from across the Turing and REG people have previously joined both as team members and project PIs.\nTuring courses and training # There are professional and academic training opportunities around the Turing. There\u0026rsquo;s some info on Mathison. Additionally, REG also runs a yearly research software engineering course.\nRemote Co-working # Occasionally a few REG members get together on Zoom to Gather to do our work (not necessarily to work on the same thing, but to see each other and have a quick chat whilst we\u0026rsquo;re working). During the COVID lockdowns, we organised these sessions regularly. Now they only occur on an ad-hoc basis. If you\u0026rsquo;d like to work in this way, feel free to ask on Slack.\nSome project teams also choose to work in this way.\nHack Sessions \u0026amp; REG Collaborative Time # If there\u0026rsquo;s something you\u0026rsquo;d like to work on collaboratively feel free to organise a hack session (typically these would be longer but less frequent than a reading group, and perhaps more focused on implementing rather than reading). In the past several of us have got together to work on contributions for Hacktoberfest.\nRepo Audits # A few of us plan to get together to help check whether documentation, usage and installation instructions are clear for a project (for example), or to review the code. See this page for more details.\nProject retrospective - Snark Hunts # Snark hunts are facilitated discussions after a project has finished where the project team, together with others from REG that didn\u0026rsquo;t work on the project, answer/ask questions relating to the experience of working on it — what went well, what could have been better etc.. We don\u0026rsquo;t do it for every project, but they can be a good opportunity to reflect and to get ideas for what we should do differently/do more of in the future. We\u0026rsquo;re open to trying other ideas too!\nFor more info, see here for more details.\nWorking on Other Projects # Working on different projects with different people causes a natural sharing of knowledge around the team. Beyond the usual project allocation process, there may be other ways to get involved with another project for a short time (some of these are speculative and not currently common practice in REG):\nRotating between projects: Where a team member has been on a project for a long time, they may wish to change. Team members should ask to rotate to a different project in the next set of project allocations. Gaps between projects: Occasionally there are short gaps between one project finishing and another starting. These can be opportunities to get involved in something different for a while. One example could be to try a project with the ARC team (though I don\u0026rsquo;t think anyone in REG has done this yet). Projects may also want to get into the habit of creating \u0026ldquo;Hacktoberfest\u0026rdquo; style issues that newcomers could quickly get up to speed with and get involved if they have a gap in allocations. Shadowing projects: Especially for new starters, we\u0026rsquo;ve started to encourage the idea of shadowing projects for a short while, to get an idea of how we work. "},{"id":9,"href":"/REG-handbook/docs/onboarding/new_joiners/","title":"New Joiners","section":"Onboarding","content":" New Joiners # This section helps new members of REG get up to speed. Please go through these page as one of the very first things when you join.\nFirst Few Days Systems Set Up "},{"id":10,"href":"/REG-handbook/docs/employee_processes/probation/","title":"Probation","section":"Employee processes","content":" Probation # During the initial 6 months in a team member\u0026rsquo;s appointment to the institute, they will undergo probation review with their line manager. (Note that if an existing team member was previously in another role at the Turing and underwent probation review in that role, they do not require a probation review when appointed to a role in REG.) This is designed to integrate with the on-boarding process to ensure that new team members are performing their job as expected. This wiki page outlines the expectations for team members and line managers in going through the probation process.\nTuring-wide information on probation can be found on Mathison:\nProbation Policy Probation FAQs Information for team members on probation # Probation in REG is a lightweight review process that will ensure you are settling into the role and performing as expected. Turing policy is that such reviews should occur with meetings at 3 weeks, 3 months, and 5 months from the team member\u0026rsquo;s start date, with a final recommendation at 6 months:\n3 weeks: Create a set of initial probation objectives once the team member has settled in. Note that you might not have a clear project or projects to work on at this point, so it is fine to refine any objectives set now at the subsequent reviews. Your manager can help you set appropriate objectives. 3 months: Initial review of progress towards your probation objectives. Your line manager will solicit feedback from people you have worked with to ensure you are settling into the team. You may need to revise your objectives to adjust for changes in the projects you have been working on, which is very normal. 5 months: Final review prior to end of probation. The timing of this review is designed to give one last chance for actionable feedback to someone that is underperforming. In cases where someone is underperforming the most likely action to be taken at this time is to extend probation for an additional 3 months. 6 months: Recommendation is made to pass probation, or to extend if the team member would benefit from additional time to settle into the role. Upon passing probation, the REG Leadership Team (Director and the Principals) will review your salary to ensure you are fairly placed relative to your peers. Juniors will not undergo pay review, as we have a separate process for development and promotion for Juniors, summarised below. See the wiki page on [[Annual-pay-increases]] for more information on the REG philosophy and principles for pay and progression, and additional information specific to the end of probation review below.\nAdditional Probation Information for Juniors # Because the Junior role is slightly different from REG roles at Standard and above, Juniors have their growth and development monitored more closely. Juniors are assessed at the end of probation as all members of the team following the description above, but have additional promotion reviews at roughly 6 month intervals to monitor their growth and development. The first promotion review occurs after the Junior has been on the team for roughly one year, and it is at this time that the Junior\u0026rsquo;s pay will be adjusted if they are growing and developing as expected (either through promotion to standard, or giving a development pay increase if they are growing in the role but not ready for promotion to Standard). This ensures that Juniors have their pay reviewed as frequently as all team members and are promoted to Standard as soon as they are ready.\nProbation information for line managers # As a manager, you are expected to help guide your report through their initial project work (or other team activities if they are not assigned to a project) and ensure their probation objectives are appropriate for their role. You should be gathering regular feedback from the team member\u0026rsquo;s collaborators (ideally someone more senior than them) and passing on information on their work and giving any constructive feedback. If all is going well, a quick message to the reviewers every few weeks to confirm that all is okay should be fine, and you should pass this information on in your regular 1/1s with the team member.\nAt 3 months, you will hold a mid-term probation review, which should simply be a slightly more formal version of the ongoing feedback on their performance. If the team member did not have a project initially, then this is a good opportunity to revisit the initial objectives and ensure they reflect the work expected of the team member. This is also a good opportunity to ensure they are participating in team events like Tech Talks, integrating socially with the team (particularly if they are not regularly working in the office), and are contributing to a Service Area.\nAt 5 months, you will hold a second review. This review is mostly to ensure that any performance issues are communicated well in advance of the 6 month deadline (see below), but should be similar to the 3 month review.\nIf you do hear any concerns about the team member\u0026rsquo;s performance, it is very important to follow up on this promptly. Because REG is a learning team, people are frequently working in unfamiliar territory and it can be difficult to recognise that they can ask for help when they are struggling and it is not a reflection on their performance. The team member could also be facing a difficult situation outside of work \u0026ndash; if they are not comfortable sharing their situation with you, then refer them to the Turing\u0026rsquo;s wellbeing support services, HR or the Turing\u0026rsquo;s External Supervisor. If there are problems with the team member\u0026rsquo;s performance and the manager is not comfortable giving this feedback to the team member, then it is best to ask for help from the Principal into whom you report. If there are still problems with the team member\u0026rsquo;s performance at the 5 month review, then you should speak to the Principal in your reporting line.\nPost-probation salary review points # End of probation review # At the end of probation, REG will conduct a salary review of all Standard and above team members passing probation. Junior staff will have their salary reviewed 12 months after appointment as part of their first promotion review (see additional information above).\nThis is purely an opportunity to identify any rare cases where we have clearly and significantly mis-levelled a new starter on initial appointment to the team. Changes to salary will only be made in exceptional circumstances to adjust the team member\u0026rsquo;s placement in the band to correct a significant misalignment and where it would not be fair to wait to the next annual appraisal to address this.\nAll line managers should evaluate whether they feel each of their reports completing probation was appointed at the right 1/3 of the salary band for their role and complete the probation completion form and send to the Principal in their reporting line and the REG Director.\nAs with progression award recommendations made as part of the annual appraisal process, the final decision on whether a salary adjustment will be made lies with the REG Director, subject to approval by Institute Senior Management.\nAnnual appraisal # From the 2023-24 appraisal year, all REG staff who have completed probation on or before 31 May will be eligible for a progression award as part of the annual appraisal process, with these awards pro-rated for those in-post less than 12 months.\nAll employees who complete probation on or before 31 January will go through the standard appraisal process on the HR system (Cezanne). Those completing probation between 01 February and 31 May will not be included in the formal appraisal process on the HR system but, for REG, line managers will perform a similar appraisal of performance as for those staff who are going through the formal appraisal process and will make a recommendation for a progression award on the same basis as for those going through the formal appraisal process. Whether undergoing the formal or informal appraisal process, progression awards will be pro-rated for staff with less than 12 months of service. See the Performance Review Guide for more information.\nSee the REG Appraisal Guide for details of how the appraisal process (formal or informal) is run in REG. Note that progression awards made as part of the annual appraisal process are separate to the universal unconditional cost of living increase awarded to all employees, regardless of probation status, each April. See the annual pay increases page for details of cost of living and progression awards from previous years.\n"},{"id":11,"href":"/REG-handbook/docs/regular_events/","title":"Regular Events","section":"Docs","content":" Regular Events # REG Events # Lunchtime tech talks Lightning talks Reading groups Open source hack sessions Outward-facing Events # Drop-in Sessions Coffee Chats # Randomised coffee chats "},{"id":12,"href":"/REG-handbook/docs/how_we_work/snark_hunts/","title":"Snark Hunts","section":"How we work","content":" Snark Hunts # A \u0026ldquo;Snark Hunt\u0026rdquo; is a project retrospective based around a facilitated discussion. This is typically carried out during a meeting that lasts for approximately one hour. The output of the meeting is a very short document which can be usefully re-read in the future. The hope is that anyone reading it might be able to find useful learnings to apply to their own work.\nYou can see notes from all previous Snark Hunts here.\nWe\u0026rsquo;re open to trying other ideas too!\nHow to set up a Snark Hunt # Find some people to take on the following roles Facilitator: Someone not on the project to facilitate the session Scribe: Someone else (also not on the project) to take notes and make these available after the session Find a suitable date Ideally you want a date that multiple people who did and didn\u0026rsquo;t work on the project can make Invite people! As this is mainly a learning exercise for REG, you should invite the whole team Feel free to invite non-REG people if this seems appropriate - inviting the PI might make team members reticent to talk freely however! Facilitator # Try to pursue questions almost to absurdity. Prefer \u0026ldquo;what\u0026rdquo; and \u0026ldquo;how\u0026rdquo; questions over \u0026ldquo;why\u0026rdquo; questions wherever possible. Take a look at the example questions (on Sharepoint) for inspiration but don\u0026rsquo;t feel constrained by them.\nScribe # Use this note-taking template (on Sharepoint) Attach names to people\u0026rsquo;s questions and answers (unless they\u0026rsquo;d prefer to be anonymous). Confirm after the meeting that all attendees are happy with your notes. Add the completed notes to Sharepoint. Note on naming # The name comes from The Hunting of the Snark, a Lewis Carroll poem about the crew of a boat who are hunting a Snark - a creature which may turn out to be a dangerous Boojum.\n"},{"id":13,"href":"/REG-handbook/docs/communications/social_media/","title":"Social Media","section":"Communications","content":" Social Media # LinkedIn # Page: turing-research-engineering\nOur LinkedIn page showcases the work done under the Alan Turing Institute umbrella and highlights the achievements of our researchers and engineers to a professional audience.\nX (Formerly Twitter) # Handle: @turinghut23\nOur Twitter account offers an informal public-facing channel for sharing updates about our projects and life at REG, engaging with our audience through insights, and updates.\nMedium # Handle: @turinghut23\nOur Medium account hosts blog posts about our projects and experiences within REG, providing in-depth analysis, reflections, and insights into our work and research at the Alan Turing Institute.\nCreating Posts # If you would like to create a post under any of the group accounts, please reach out to the account controller(s).\nWhat to Post # Projects we work on (if public) Blog posts Talks that we organise Conferences and workshops Any public outputs — papers, published code etc. Researcher spotlights Please refer to the Turing\u0026rsquo;s social media policy when making posts.\n"},{"id":14,"href":"/REG-handbook/docs/onboarding/society_of_research_software_engineering/","title":"SocRSE","section":"Onboarding","content":" Society of Research Software Engineering # The Society of Research Software Engineering (SocRSE) is a charitable incorporated organisation with the mission to establish a research environment that recognises the vital role of software in research.\nREG supports and encourages its members to join the SocRSE, so it\u0026rsquo;s worth reviewing the society\u0026rsquo;s website and deciding whether to join during your onboarding period.\nBenefits of SocRSE # There are many benefits to joining the SocRSE. By joining the Society you will:\nContribute to the Society\u0026rsquo;s work supporting the research software engineering community Gain access to the Society\u0026rsquo;s Events \u0026amp; Initiatives fund Get discounted access to the Society\u0026rsquo;s annual conference Be eligible to vote and stand for election at the Society\u0026rsquo;s annual AGM Have your say in one of the Society\u0026rsquo;s special interest, regional or working groups Be able to apply for the Society’s mentorship scheme Gain access to discounts from the Society\u0026rsquo;s corporate sponsors Communication Channels # The Society has a website, Slack and email list. Their Slack workspace contains plenty of details about relevant events.\nClaiming Back Subscriptions # SocRSE membership is considered a professional subscription, which you are entitled to claim back as a REG member.\nYou should claim it back quickly after payment. Use Certify to claim it back following these instructions. Note that this expense is not directly related to a project.\n"},{"id":15,"href":"/REG-handbook/docs/employee_processes/annual_appraisals/","title":"Annual Appraisals","section":"Employee processes","content":" Annual Appraisals # REG is a large team, with a relatively flat line management structure. Therefore we run a team-wide standardisation process where appraisals and progression award recommendations are reviewed to ensure consistency and fairness across the team.\nOur goal is to work within the wider HR policy and guidance (see HR Performance Review Guide) to prioritise what we think is most important for our team (fairness, transparency and a clear progression path) and provide clear guidance to achieve that.\nPrinciples # REG members who are operating at an equivalent level should receive equivalent pay. We are a learning team and our default assumption is that people will generally be growing and developing in their role as they gain more experience. Everyone who is performing and developing as expected for their role and their experience level within it should expect to progress through their pay band each year on top of the cost of living adjustment. This is very much in line with the guidance on salary increases from HR. Useful links # Annual appraisal process for those on probation REG Appraisal Guide Annual Pay Increases HR Performance Review Guide "},{"id":16,"href":"/REG-handbook/docs/technical_practices/change_logs/","title":"Changelogs and Semantic Versioning","section":"Common Technical Practices","content":" Changelogs # For any non-trivial code, it is worth maintaining a Changelog. This is valuable as it is a record of changes from the perspective of users (rather than git commit messages which are often only meaningful to the developers involved). A recommended format for Changelog files is given at Keep a changelog. All notable changes to a project should be documented in this file.\nSemantic Versioning # A related concept is semantic versioning. In most cases, semantic versioning is recommended. You should state explicitly whether or not you are using semantic versioning in both your project\u0026rsquo;s README and CHANGELOG files.\n"},{"id":17,"href":"/REG-handbook/docs/how_we_work/defining-done/","title":"Defining Project Doneness","section":"How we work","content":" Defining Project Doneness # This working document was produced as part of Accelerating AI in the Arts and Humanities (AAAH).\nAs a Research Software Engineer, we often join a collaborative project when a code base already exists. Defining the aims of a collaboration can be challenging, and when there is limited time it is important to apply attention in the right places. The following document is designed to help:\nShowcase what is important to us as RSEs Assessing the current status of an existing repo Define clear objectives Determine where to put effort Provide a common framework and language for collaborators Clearly define when the collaboration is done! The framework includes objectives that focus on improving the impact and legacy of the software, expanding communities of practice, and providing a confident codebase for future research.\nFor each project discuss with collaborators which \u0026ldquo;Level\u0026rdquo; in each of the following categories is a MINIMUM aim for defining done. Remember, time is a resource and so consider where efforts should be prioritised.\nReach and Robustness Level 01. Internal users: Identify how users already use the tool and its current issues. Level 02. Best practices: Address minimum code best practices with view to robustness and accessibility Level 03. External users: Identify how similar external users could use the tool and current barriers Level 04. Generalise: Identify how the tool could be made general and current barriers to that Level 05. Proof of concept: Demonstrate its use outside its original intended purpose/audience. Functionality Level 01. Standard use: Install the tool, try out a standard use case, write a demo if one doesn\u0026rsquo;t exist Level 02. Known Limitations: Understand and report. Level 03. Advanced use: Try out normal range but more advanced use cases, with edge cases. Level 04. New features: Identifying features for new functionality. Level 05. Enhancements: Fix functionality bugs and add features. Documentation Level 01. Follow docs: Follow the existing starting point of documentation (no help!) Level 02. What\u0026rsquo;s missing: Identify what documentation is missing: e.g. installation, optional arguments, licensing, diagrams/screenshots, future work, etc. Level 03. Write docs: Write the documentation in markdown files Level 04. Published: Release the documentation on GitPages etc Level 05. Walkthrough: Write walkthroughs/demos (also gifs or videos) Testing Level 01. Continous Integration Start the automated infrastructure Level 02. Defining Positive/Negative Cases Conversation about what are the expected outcomes/how the tool works Level 03. Automated User Tests End-to-end tests that check expected outcomes from above, black box Level 04. Fine-grain Tests/Unit Tests Focus on critical/pain points, remove brittleness, modularise and reuseable components Level 05. Error Reporting Focus on negative cases, informative error communication for external collaboration Open Release Level 01. Find barriers: Identify minimum criteria that need to be solved before public release e.g. authorship, sensitivity, licensing, publicity, timings Level 02. Solve barriers: Address the minimum criteria and milestone efforts Level 03. Release: Make the repo public. Level 04. Distribute: Release the repo on PiPY or CRAN or equivalent, include DOI Level 05. Publisise: Publish the repo with JOSS, and/or publicly present the work. "},{"id":18,"href":"/REG-handbook/docs/working_at_the_turing/equipment/","title":"Equipment","section":"Working at The Turing","content":" Equipment # Getting a New Computer # This is a list of the steps taken by a REG member when they got a new Turing laptop from IT to replace their old laptop. Please note that you don\u0026rsquo;t have to follow these steps, it is just advice given by someone who went through the process.\nSign in to Apple Cloud on new machine. Activate all accounts (Office365, personal email, \u0026hellip;)\nbrew cask install emacs, and anything else you need.\nStore config files on Apple Cloud, and symbolic link them to their required place, eg:\n~/.emacs.el ~/.bash_profile Office (including OneDrive): install with the new \u0026ldquo;self service\u0026rdquo; app that IT now bundle with laptops (which apparently installs things via homebrew!)\nOneDrive setup. You might have a personal shared space on OneDrive, but also multiple shared spaces for projects, set up as \u0026ldquo;Groups\u0026rdquo; in Office 365. The standard location that Office chooses for your local OneDrive image is long and full of spaces. Put all shared spaces in ~/OneDrive-Actuals and then symbolic link to ~/OneDrive (for my personal space) and ~/Share/X (for project X).\nSSH tokens for GitHub. You can make new ones or think about moving the old ones, but it turned out to be straightforward to make new ones.\nGo through every repo with an authoritative remote, make sure you\u0026rsquo;ve pushed all local commits, and delete. (I keep all repos in ~/Projects/, with remotes usually on GitHub.)\nDouble-check other directories within ~/\nInstall Emacs additions as I learn that I need them \u0026hellip;\nAdditional Equipment # There is a budget to purchase peripherals (monitor, mouse, keyboard, etc.) as well as other equipment such as an office chair and desk. You can purchase the office chair and desk yourself and claim back up to £200 in total via Certify. The official process is to assess your home-working set up via a workstation self-assessment form. However, you can try contacting the facilities team directly. For peripherals, it\u0026rsquo;s better to contact IT. See the Turing\u0026rsquo;s Homeworking Policy for more information.\nIf there are health and safety reasons why you would want equipment that differs from the standard Apple keyboard/mouse then contact HR directly, there is a separate health and safety budget for such things.\n"},{"id":19,"href":"/REG-handbook/docs/how_we_work/meeting_record/","title":"Meeting Records","section":"How we work","content":" Meeting Records # When a synchronous meeting is unavoidable, it is critical to produce a clear and thorough record.\nThe meeting record is important as a reference for what happened at the meeting. In particular, any decisions made or actions assigned need to be clearly recorded for future reference.\nA good record will also be invaluable to anyone who was not able to attend an in-person meeting.\nMeeting Record Template # Below is a suggested template for a meeting record document. The template uses Pandoc Markdown. Parts of the template are already filled with explanations of how they should be used.\n--- title: Short meeting title date: yyyy-mm-dd author: - List of authors of the this record abstract: | Summary of meeting purpose. Should help readers decide whether they need to read the record. keywords: [] # Pandoc LaTeX variables papersize: a4 fontfamily: fourier fontsize: 12pt colorlinks: true --- # Meeting Record ## Agenda 1. Itemised Agenda 1. Should be agreed in advance ## Present - List of people present ## Notes - Summary of discussion points - Use subsections if appropriate ## Decisions - Record any decisions made during the meeting ## Actions | Owner | Action | |-------|--------| | | | For printing or wider distribution, a meeting record following the template may be converted to pdf using Pandoc,\npandoc meeting_record.md -o meeting_record.pdf A Pandoc YAML metadata block at the top of the template contains metadata about the meeting and helps the record render into a good-looking pdf document.\nHow To Use # Create the meeting record document before the meeting. Use a collaborative text editor like HackMD so that all attendees may edit the document. Circulate the document to allow others to add and agree on agenda items. Distribute the record or store in a location visible to everyone who may need to read it. The template may also be used to avoid a meeting entirely. The document can be completed collaboratively and asynchronously while achieving the same result.\n"},{"id":20,"href":"/REG-handbook/docs/onboarding/","title":"Onboarding","section":"Docs","content":" Onboarding # This section contains information about onboarding process for new members of REG.\nOnboardees: Please go through these pages as one of the very first things when you join.\nBuddy system New Joiners Onboarders: Please see the following wiki page for everything you need to know about becoming an onboarder.\nREG Onboarding "},{"id":21,"href":"/REG-handbook/docs/join_us/recruitment_faqs/","title":"Recruitment FAQs","section":"Join Us","content":" REG Recruitment FAQs # Here you can find answers to the most frequently asked questions about working for the team and the recruitment process.\nQuestions are grouped by:\nApplication Stage Profile Position Interview Offer Application Stage # Is the position open to applicants outside of the UK who do not currently have a UK working Visa but could obtain one? # Yes, the positions are open to applicants outside the UK and our HR team (HR@turing.ac.uk) will be able to offer you additional information on the process of obtaining a working Visa.\nAre you accepting remote applicants? # Our team is currently trialling being remote-first and is minimising the amount of time people will be required to be in the office. Requirements for in-office attendance will depend on projects, but we will seek to match these to individual preferences wherever we can, and no team member will be asked to be in the office more than one day per week during the trial period. Note however that our members need to be based in the UK.\nWhat would be the starting date? # We are keen to grow the team so would prefer if people can start within 3 months of an offer being made and would be happy for successful candidates to start sooner. However, we are looking to recruit multiple people and we are hiring for the long term, so we can support later starting dates if a successful candidate\u0026rsquo;s circumstances require it.\nHow many open positions are available? # We are looking to grow the team by up to 10 people at Standard level in this recruitment round, with the timing of recruitment dependent on finding the right candidates, project demand and the rate at which we can effectively support new starters in joining the team.\nIf my application was unsuccessful in the past, am I allowed to apply again this time? # If you applied and did not get selected to interview you are welcome to apply again, but we suggest to revise your cover letter and CV and make them more in line with the requirements specified in the job ad.\nIf you applied and were unsuccessful at the interview stage, you are welcome to reapply if your profile has significantly progressed since the interview (new projects, job roles or other sources of experience). In general, we suggest to wait for at least one year before applying again.\nDoes the Turing cover relocation and visa costs? # Yes. The Turing recognises that relocating and applying for a visa have different associated costs and therefore will provide support for both. All claims should be submitted within a year of the employment start date to Finance. For existing staff, visa claims should be submitted within one year of the visa renewal or amendment. More information can be found on Mathison.\nProfile # Are there particular domains or skill sets that you are interested in for these roles? # We are really open to any domain, area of expertise, skill set that is broadly related to research data science or research software engineering.\nIf you have experience or are interested in High Performance Computing, as part of the open positions, we are actively looking for new members of the team to work on that area as Research Computing Engineers. You can drop an email to the REG recruitment team (reg-recruitment-info@turing.ac.uk) to learn more about it.\nHowever, we are recruiting for multiple positions, and are interested in a wide range of skills and experience, so please do apply if you are interested and have experience relevant to research software engineering and data science, broadly defined. You can see the range of projects the team works on and backgrounds of current team members on our website.\nSome of the team have also been featured in project and institute spotlight interviews and the Turing podcast (including episodes on AI for the Skies, Fantasy Football AI, 3D printed bridges, Reproducible data science, The problems of AI and Living with Machines).\nWhat is a Research Computing Engineer? # This role presents a new exciting opportunity to join the growing team of research computing experts at The Turing. The team assists the Turing community with designing, building, deploying, and maintaining research infrastructures, as well as providing service delivery and user support for the Institute’s research computing platforms. This is an opportunity for a technically-skilled professional with a good understanding of either cloud or high-performance computing (HPC), experience with both application and infrastructure, and an interest in facilitating and enhancing world-leading data science and AI research. You will build tools and automation to eliminate mundane operations and craft repeatable processes. As part of the team, you will also work with other research software engineers and data scientists on various projects and will participate in all phases of cloud / HPC development, from requirements-capture, definition, and design; to development, deployment, and maintenance; to performance tuning and monitoring. You are also expected to keep up-to-date with the latest cutting-edge developments, and/or make use of the UK’s most advanced computing facilities like Dawn, ARCHER 2, JADE 2, and Baskerville.\nShould the cover letter address each of the skills and requirements in the person specification section of the job description? # It is important that the cover letter, in conjunction with the CV, highlights the requirements listed as \u0026ldquo;check at Application\u0026rdquo; on the Person Specification, and shows a (general) understanding of the role of a research data scientist or software engineer. Also, it is important to highlight:\nYour past experience working with code and/or data Why you would like to become part of the Research Engineering Group How your skill set would complement the activities of the team. What does \u0026ldquo;equivalent professional experience\u0026rdquo; mean? # If you do not have a PhD degree but have worked for a few years and believe you have gained the essential skills mentioned in the Person Specification, we encourage you to apply!\nSuch experience might include exposure to research projects, awareness of the importance of reproducible software and tools, working with or leading a team of people with different skill sets, deciding on how to best achieve an objective from a data science perspective, or presenting advice/results to an audience. We would like to hear about your prior experience in your cover letter. If you prefer, feel free to get in touch with the REG recruitment team (reg-recruitment-info@turing.ac.uk) about this point.\nWould not having a PhD prevent me from career progression, in terms of becoming a Senior Research Data Scientist/Research Software Engineer at the Turing Institute? # Absolutely not, our internal career progression is based on internal milestones and contributions to the group and the Turing community - do not worry about this at all.\nPosition # What is the difference between a Junior and a Standard role? # The main difference between the Junior and Standard roles is that the Junior is a training position for becoming (in 1-2 years) a Standard research data scientist or software engineer. We consider candidates for the Standard position if they have a PhD or an equivalent working experience (meaning for instance a few years of work in a data scientist or software engineer position, in close contact with research projects). If you think you have enough experience you can apply to the Standard position and stress this in your cover letter. You can also apply to the Junior position and mention in your cover letter that you are also considering the Standard position, in case you feel your profile or working experience is in between the two. Feel free to get in touch with the REG recruitment team (reg-recruitment-info@turing.ac.uk) about this point.\nFor the Junior post it states as Essential: \u0026ldquo;Fluency in one or more modern programming languages used in research in data science and artificial intelligence\u0026rdquo;. In my case I am familiar with X, would my computing knowledge satisfy this criteria? # Depending on the project, we work with different programming languages and different settings, so more than the programming languages you currently know the important aspect for us is the willingness and ability to pick up new languages along the way, based on your previous experience (especially in research and data analysis contexts).\nGiven the job profile in the REG team, what do REG members tend to transition to (for eg. Academics, or Industry, or something else)? # We have only had a few members of the team who have moved on with their career trajectory so far. To read about some of their career paths you can visit our REG alumni page. Some of them moved to a traditional academic position (for instance pursuing a PhD, taking a professorship), and others to industry and government positions. Others have progressed to more senior roles within the team.\nWould the candidate be able to bring their own projects with them and/or seek funding while in the role ? # The team\u0026rsquo;s role at the Turing is to collaborate with institute researchers to support their research agendas, rather than pursuing our own. It is much, much more usual for team members to be working on other people\u0026rsquo;s projects than their own. If you would like to prioritise pursuing your own research agenda at the Turing there are other types of positions at the Institute that allow you to do this.\nHowever, we are keen to support team members in pursuing their careers, including developing and leading projects. We would generally expect these to be projects that would be a sufficiently good fit for the team and the Turing that we would take them on even if the particular team member was not involved.\nWe would also expect team members that do lead their own projects to continue to work collaboratively with others in REG and the Institute. We would therefore not expect people to be bought out more than 50% on their own project and would expect the project to involve other members of the team or the Institute.\nNevertheless, while a permanent role within REG is not meant for pursuing an independent research agenda, we highly encourage initiatives and are open to hear new ideas and contributions. So, if you think your project would benefit our group and the Turing (and vice-versa) you should highlight it in your cover letter.\nInterview # Could you describe the interview process? # As we mentioned in the job description, all interviews are currently held remotely.\nWe operate a two-stage interview process. If you are successful at the screening stage, you will be asked to attend the first interview via video call. In this interview, you will be expected to give a ten-minute presentation on code you have written that either demonstrates an algorithm that you consider important in data science or illustrates your use of good research software engineering practices. Existing examples of work are encouraged as long as the code was substantially written by you. You should be prepared to answer questions about both the code and the research challenge it addresses or the algorithm it demonstrates. Any source code shared for the interview will be treated in the strictest of confidence.\nThe second interview is usually held about one week later for successful candidates. This interview focusses on your previous experience and competencies for the role. There will also be a problem-solving discussion with the interview panel, where you may want to use paper and pen to arrive at an understanding of a proposed data analysis challenge.\nIn both interviews, there will be the opportunity to ask questions about the role and the team.\nDoes the algorithm need to be written entirely by me? # In the first interview we expect you to demonstrate your ability to write code for addressing a data science task in a reproducible manner and/or to use good software engineering practices for developing research software. This could be done by presenting a data analysis script or piece of research software written entirely by you, or by presenting a larger piece of research software you have made a significant contribution to. Using existing libraries that implement algorithms you are using is fine (and good practice), but in all cases there must be a significant amount of code you have written yourself, it must be clear what code you have written yourself, and we expect you to talk about and answer questions on:\nthe code you have written, the underlying algorithms or methods your code is implementing or using, and the research domain or question for which you are applying them. Can you give any more detail on what the panel expect from the algorithm which will be presented - does it need to meet any certain criteria, for example have a certain level of complexity? # In the first interview we expect you to demonstrate your ability to write code for addressing a data science task and/or to use good research software engineering practices for ensuring research reproducibility. This could be done by presenting for instance a data analysis script written by you, where you would describe us the implementation and answer some general questions. The adopted algorithms can be ones available in existing software libraries, integrated for instance in a data analysis workflow, but they can also be written by you if you prefer.\nWe will not evaluate you on the complexity of the algorithm, but in your understanding of its implementation, awareness of its potential downfall and its overall appropriateness to solve the problem you are trying to address.\nWill I be only explaining the algorithm / analysis / software, or running it and discussing the results? # You will be presenting your chosen analysis, algorithm or software and its implementation, but you should be able to talk about the results of the analysis or the performance of the software. It would be useful to be able to run the code to generate results, but we recognise this is not always reasonable in an interview setting. If this is not not feasible then you should bring some previously generated results so that we can have a conversation around inputs and outputs. The discussion will likely touch on the performance of the algorithm in terms of e.g. speed, accuracy or range of applicability, but our goal is to evaluate your understanding of the algorithm, analysis or software and its implementation rather than to assess you on the performance of your particular implementation.\nShould the presentation be verbal only or should I produce some materials alongside it - would the committee prefer presentation directly from an IDE, or using a presentation software? # You should be able to show and (potentially) run the code (this could be using Jupyter notebooks, Rmarkdown, a mix of an IDE and the command line). You are welcome to include any other material that could be useful for supporting your presentation.\nWhat will the problem solving aspect of the second interview involve? Will I be asked about particular data science or machine learning approaches? Will I need to write code or explain the details of an algorithm\u0026rsquo;s implementation? # In the second interview we expect you to discuss a question related to the analysis of an example dataset. All information required to answer the question will be given to you in beginning of the interview. No preparation or specific technical knowledge is expected or required. The goal of this exercise is not to test your understanding of any particular algorithm or data science method, but rather to assess your general approach to tackling a data science question.\nThis exercise will not require you to write any code or explain the details of any algorithm. The exercise isn\u0026rsquo;t assessed on whether or not you know the \u0026ldquo;right\u0026rdquo; answer to a particular data science question, but on the process you go through to understand the question and the data and your reasoning for the approaches you suggest. Taking some time to think through the question is fine, as is asking questions to the interviewers. Consider them as subject matter experts coming to you to answer a question using their data.\nIs there anything in particular I should prepare for the problem solving interview? # Nothing at all. The best thing you could do to be prepared is to eat well, take some long walks far away from the computer and get a good night\u0026rsquo;s sleep.\nOffer # What are the reasons of your job offer? Is the salary negotiable? # Fairness and transparency are key values for us and our goal is to avoid inequity by ensuring we are paying people the same salary for the same level of contribution to the team. Our offers are not negotiable and set by considering the level and applicability of each candidate’s experience relative to their future peers already working in the team.\nWe have annual pay reviews, where we actively review the performance and development of each team member against the expectations of their position within their seniority band and make salary adjustments where these expectations are being exceeded. Additionally, the team is growing and there will be opportunities for people to progress in their career.\nBecoming a member of REG will also bring the following benefits:\nFlexible working: we are currently trialling being a “remote-first” group for the entire decision-making process, but as the office is now fully re-opened members are free to choose how often they come into the office.\nThe opportunity to work and collaborate on cutting-edge data science projects with high-profile institutions, but with the benefits of working in a full-time position (better than a post-doc, better than many data science roles in industry).\nStrong input into which projects you work on. We value providing the experience of learning something new in a collaborative setting, and prioritise staffing people onto projects they would like to work on rather than maximising the fit to people\u0026rsquo;s prior experience. Our group is made up of people with a wide range of skills and experiences and we generally find we can put together project teams with a suitable mix of skills from those who are enthusiastic about each project.\nFormal support for professional development via learning and development plans each team member develops with their line manager during the probation process, annual objective setting and regular 1-2-1s. These learning plans feed into the projects people are allocated to and the roles and responsibilities they undertake within these.\nSupport to team members with their development outside of projects, providing 20% time that is split evenly between self-directed development and getting involved in one of the group\u0026rsquo;s or institute\u0026rsquo;s service areas. We support team members to attend conferences, workshops and courses, and there are many seminar series and interest groups at the Turing that team members are encouraged to get involved with, including the team’s own weekly tech talks. We also support team members making contributions to the wider ecosystem as part of their 20% time. Examples include contributing to external Open Source Hacksessions and contributing to community groups like the Society for Research Software Engineering.\nThe opportunity to get involved in non-project work through one of the team\u0026rsquo;s service areas, some of which support the running of the team and some of which support the wider research community at the institute (for instance Recruitment, Planning and finance, Training, EDI, Communications, Research computing support, Research programme liaison). Some service areas require significant support and will have core team members who have chosen these service areas instead of a full project workload, but all team members have a 10% allocation to volunteer for a service area of their choice.\nThe opportunity to contribute to how the group works and grows. We run the team in an open, consultative and collaborative manner and almost all of our decision making on how we organise ourselves and develop the team is done in the open on our group GitHub with the opportunity for anyone in the team to contribute.\nOther benefits include private healthcare and a 13% contribution to a defined contribution pension scheme (3% from the employee, 10% from the Turing).\nMy question is not answered here # Please contact the REG recruitment team (reg-recruitment-info@turing.ac.uk) with any additional questions you may have. We also run monthly drop-in sessions where you can meet some of the current team and ask them questions face to face. These sessions will be hosted by team members who won\u0026rsquo;t be involved in that month\u0026rsquo;s interview process, and questions you ask at these sessions will have no influence on how your application is treated. To be informed of the details for these drop-in sessions, please register for the team\u0026rsquo;s recruitment newsletter.\n"},{"id":22,"href":"/REG-handbook/docs/how_we_work/code_audits/","title":"Repo Audits","section":"How we work","content":" Repo Audits # As required we conduct audits of GitHub repositories created during projects. The aim is to check that the documentation is clear, installation is easy etc.\nAudits should be conducted by people who have not worked on the project.\nPast experience # These comments from running the first round of these in June 2021:\nInstallation is a big barrier for software with complex build requirements. We tried looking at two web app projects (Counterfactual Covid 19 and CROP) and despite Docker images being available we weren\u0026rsquo;t able to get them to build correctly. We might have had more success if all we needed to do was a pip or CRAN install.\nFirst lesson: installation is ALWAYS harder than you think, and we need to get more fresh eyes on build instructions if we want our software to be easily usable. Second Lesson: Not having someone on hand from the project can be a big barrier, as we suspect there may have just been some small tweaks or changes that would fix our problem. One suggestion was to have a mix of unsupervised hacking and more knowledgeable feedback, maybe by having the person working on the project show up an hour in. If we can\u0026rsquo;t get someone who knows the project well to attend, at least have them available on Slack in case we get stuck. At the very least, we were able to document our issues on the repo, and in at least one case the project was able to make fixes. One suggestion is to encourage \u0026ldquo;Good First Issue\u0026rdquo; tags or \u0026ldquo;Hacktoberfest\u0026rdquo;-type tags that would help people know what simple things could be tackled in a few hours if they succeed in installing the software. I have found that it isn\u0026rsquo;t always straightforward to come up with such issues (I tried thinking of some for a previous iteration of the activity, but always got stuck when I realized I didn\u0026rsquo;t have a clue what to do and explaining the problem was hard enough), and in projects that are currently running it isn\u0026rsquo;t always easy to leave these uncompleted when you have more time to work on a project.\nOne idea was to have a HackMD document, similar to the one that suggests project meetings for new joiners to shadow, that lists all repos with such issues in one place, making it easier to find something fruitful to work on if these audits continue to be spontaneous.\nAn alternative is to make these non-spontaneous and schedule them in advance. We\u0026rsquo;ve kicked around the thought of scheduling lightning talks for all projects — perhaps we could better leverage people\u0026rsquo;s brains if we gave a lightning talk intro on Tuesday and then guided people through installing and hacking on the software the next day?\nNew joiners to projects inevitably spend a bunch of time doing exactly what we were trying to do in these sessions. Can we leverage the time investment of the new joiner by doubling up other team members to do this?\nShould new joiners to the team be encouraged to do this for a couple of weeks before being assigned to a project? I had a few new joiners on one of the audit sessions, and they said it was a good way to learn more about the team and our projects.\n"},{"id":23,"href":"/REG-handbook/docs/contributing/style_guide/","title":"Style Guide","section":"Contributing","content":" Style Guide # Semantic Line Breaks # It is encouraged to use Semantic Line Breaks when writing for the handbook. This improves the readability of source files and make diffs clearer. The Semantic Line Breaks specification explains the rules and reasoning. The most important rules are,\nA semantic line break MUST occur after a sentence, as punctuated by a period (.), exclamation mark (!), or question mark (?). A semantic line break SHOULD occur after an independent clause as punctuated by a comma (,), semicolon (;), colon (:), or em dash (—). A semantic line break MAY occur after a dependent clause in order to clarify grammatical structure or satisfy line length constraints. Markdown # Whenever possible, the handbook\u0026rsquo;s prose should be written in Markdown rather than HTML. However, it is completely reasonable use HTML when it is needed. When it is advantageous, data should be stored in data files and processed using shortcodes rather than presented in raw Markdown.\nStyle Enforcement # Markdown styling is enforced using the markdownlint tool, using the style rules in .mdl_style.rb . An explanation of the rules can be found here.\nMarkdown linting is performed on all pull requests made to the handbook repository, as described in the Continuous Integration section.\nIf you wish to lint locally, the repository contains a pre-commit hook to do this, described in the Making Changes section.\n"},{"id":24,"href":"/REG-handbook/docs/contributing/creating_a_page/","title":"Adding New Content","section":"Contributing","content":" Adding New Content # How Hugo Arranges Content # Pages are built from content files in the content/ directory. Hugo automatically gives pages a URL based on the organisation of files in the content/ directory.\nIn Hugo, the first directory after content/ is significant and defines the content type. All handbook pages should be nested in the content/docs/ directory.\nSections may be created in content/docs/ (to any depth) by creating a directory containing a content file called _index.md.\nIt is important that the index file exists for Hugo to correctly assign pages to sections and for the theme to arrange pages in the tree-like menu. Creating a New Page # To create a new handbook page use the hugo new command.\nhugo new content/docs/\u0026lt;path/to/page\u0026gt;.md If you wanted to create this page, you would type\nhugo new content/docs/contributing/creating_a_page.md Hugo will create a new Markdown document at the path you specified.\nHugo provides a convenient way to generate new pages from templates called Archetypes. You can see the archetypes in the archetypes/ directory .\nBecause your document is in the docs directory, Hugo will look for an archetype called docs.md to use as a template.\nNow you can edit your page with your favourite text editor. For example\nvim content/docs/contributing/creating_a_page.md Creating a Section # We can also use the hugo new command to create a new section, both the directory and index file. For example\nhugo new content/docs/new_section/_index.md vim content/docs/new_section/_index.md If you only want a section to organise some pages and not to have a page of its own, you can simply leave the content section of _index.md (after the YAML front matter) empty.\n"},{"id":25,"href":"/REG-handbook/docs/employee_processes/","title":"Employee processes","section":"Docs","content":" Employee processes # "},{"id":26,"href":"/REG-handbook/docs/working_at_the_turing/edi/","title":"Equality, Diversity, and Inclusion","section":"Working at The Turing","content":" Equality, Diversity, and Inclusion # Overview # The Turing has a strong commitment towards EDI, which is formally set out in the Institute\u0026rsquo;s EDI Strategy and Action Plan. For current Turing staff, you can also access an EDI section on Mathison.\nHow to get involved # If you are keen to be involved in the EDI work around REG and the Turing, do feel free to join the #edi-equality-diversity-inclusion channel on Slack, and/or contact:\nin the first instance, the people involved in the REG EDI service area.\nBesides the people directly allocated to this service area, we also have a group of volunteers who are involved on a \u0026lsquo;best-effort\u0026rsquo; basis. You are welcome to join in any capacity!\nthe Turing\u0026rsquo;s dedicated EDI team\nBelow we\u0026rsquo;ve described a handful of specific initiatives at the Turing which REG have been involved with. This list is not exhaustive (nor should it be: there is always more to be done!).\nHDR UK Black Internship # Since 2022 REG has been involved in hosting interns from the Black Internship programme by Health Data Research UK. Interns have typically been involved with one health-related project from REG, plus many other activities around the Turing. You can see a researcher spotlight on Olajumoke, one of our interns from 2023.\nEDI Annual Report # Each year the Turing publishes an annual report (see here for the most recent one, covering the period between October 2021 and September 2022), as well as a gender pay gap (see here). REG typically assists the EDI team with analysis of the underlying data and recommendations on how to treat sensitive data.\nNetwork Groups # The Turing has set up four EDI network groups centred on specific topics, with the aim of providing feedback to the Institute\u0026rsquo;s EDI team and senior management:\nDisability and Wellbeing Gender Equality LGBTQ+ Equality Race Equality REG members are strongly encouraged to participate in these groups. Additionally, group chairpersons (who can be from REG) are awarded an honorarium.\nBCSWomen Lovelace Colloquium # Since 2023, the Turing has been a sponsor for the BCSWomen Lovelace Colloquium, a one-day conference for women and non-binary students in computing fields. In 2023 REG sat on the careers panel and also (together with other teams from the Turing) had a stall at the conference.\n"},{"id":27,"href":"/REG-handbook/docs/how_we_work/project_tracking/","title":"Project Tracking","section":"How we work","content":" Project Tracking # This page describes some of the tools we use for tracking projects and other tasks within the team. It does not go into details of how individual projects are managed, but how REG coordinates its commitments to the range of projects its involved in.\nHut23 GitHub Repo # The Hut23 repo is the central hub for most team matters and admin.\nProject Tracker: Board shows all upcoming, current and completed projects. There\u0026rsquo;s an issue for each project (see below). Depending on the project status, it will be in one column or another. In order to assign REG team members to projects, we use emojis to vote for the projects that we would be interested in taking part. You should react to all projects on the \u0026ldquo;Finding people\u0026rdquo; column, but also on the \u0026ldquo;Awaiting go/no-go\u0026rdquo; column. The voting system is as follows:\n\u0026#x1f44d; Would be okay working on this project \u0026#x1f44e; Would rather not work on this project \u0026#x1f604; Would really like to work on this project Issues: Each project has an issue following a common template, including a general description of a project and its current status, for example. There are also issues for service areas and other activities/organisational issues for the team.\nProject Repos # All repos in the Turing organisation that REG have worked on should have the hut23 tag. So if you\u0026rsquo;re looking for something from a previous project searching for these tags may be a good place to start. Additionally, they should have a tag of the format hut23-123, where 123 is the issue number for that project in the Hut23 repo.\nForecast \u0026amp; Wimbledon # We use Forecast to track everyone\u0026rsquo;s allocations to projects. You can see which projects \u0026amp; service areas everyone in the team is currently involved in, as well as what they were allocated to in the past and will be allocated to in the future.\n\u0026ldquo;Wimbledon planner\u0026rdquo; is an online version of a poster we previously had in the office to display the information in Forecast. It\u0026rsquo;s easier to see allocations for a longer period, and you can click project names to take you directly to the issue describing that project in the Hut23 repo.\n"},{"id":28,"href":"/REG-handbook/docs/technical_practices/python/","title":"Python Tools and Practices","section":"Common Technical Practices","content":" Python Tools and Practices # Python is a widely used language within REG. Below are some useful tools to help you configure your repo (with links to examples).\nSome of the topics discussed below are not exclusive to Python. As more content is added to the manual they should be separated out into their own pages. Autoformatters / Linters # There are many widely used autoformatter and linters for Python, which can be used as standalone tools or call from .pre-commit, continuous integration tools etc.:\nisort Sorts your import statements correctly. The order isort \u0026ldquo;sorts\u0026rdquo; imports in the following order: standard library imports (e.g. import os). related third party imports (e.g. import pandas). local application/library specific imports (e.g. from .my_python_file import MyClass). You should put a blank line between each group of imports. the configuration of isort can be specified in a pyproject.toml file, where isort is using the [tool.isort] section. black A highly opinionated code formatter, which enforces control of minutiae details of your code. The configuration of black can be specified in a pyproject.toml file, where black is using the [tool.black] section. flake8 A wrapper for three other tools: PyFlakes — checks syntax, without checking the style. pycodestyle — checks compliance with PEP8 Ned Batchelder’s McCabe script — checks the cyclomatic complexity of code. Configuration can be specified in a .flake8 configuration file in the root directory of your project. It is possible to use all of these in combination. The ARC group have a template repo with suggested configuration files which you can copy/adapt as required.\nType Checkers # Type checking is optional in Python but is generally recommended. There are several tools which can perform type checking:\nmypy — This type-checker has the distinction of including Guido van Rossum in its core development team. pyright — By Microsoft. pytype — By Google. Automation (Pre-Commit \u0026amp; Actions) # A convenient way to incorporate many of these tools and checks into your workflow is to use pre-commit. Below is an example. You could adapt this to your needs, or create your own from the many hooks described in the documentation.\n# See https://pre-commit.com for more information # See https://pre-commit.com/hooks.html for more hooks repos: - repo: https://github.com/pre-commit/pre-commit-hooks rev: v4.2.0 hooks: - id: trailing-whitespace - id: end-of-file-fixer - id: check-yaml - id: check-xml - id: check-json - id: pretty-format-json args: [--no-ensure-ascii, --no-sort-keys, --autofix] files: \u0026#34;.+json\u0026#34; - id: check-added-large-files - repo: https://github.com/psf/black rev: 22.3.0 hooks: - id: black # files: \u0026#34;*.py\u0026#34; exclude: \u0026#34;.+/ignore_this_legacy_file.py\u0026#34; - repo: https://github.com/pre-commit/mirrors-autopep8 rev: \u0026#39;v1.6.0\u0026#39; # Use the sha / tag you want to point at hooks: - id: autopep8 - repo: https://github.com/pre-commit/mirrors-mypy rev: \u0026#39;v0.960\u0026#39; # Use the sha / tag you want to point at hooks: - id: mypy exclude: \u0026#34;.+/ignore_this_legacy_file.py\u0026#34; - repo: https://github.com/pre-commit/mirrors-isort rev: v5.10.1 hooks: - id: isort This example checks:\nThere is no trailing whitespace at the end of each line. There is exactly one blank line at the end of the file. Any yaml files in the repo are formatted correctly. Any xml files in the repo are formatted correctly. Any json files in the repo are formatted correctly and \u0026ldquo;pretty printed\u0026rdquo;. If any large files have been added to the repo without using git-lfs Any python code (except the file named \u0026ldquo;ignore_this_legacy_file.py\u0026rdquo;), is formatted according to \u0026ldquo;black\u0026rsquo;s\u0026rdquo; uncompromising standard. Any python code (except the file named \u0026ldquo;ignore_this_legacy_file.py\u0026rdquo;), is formatted according to \u0026ldquo;pep8\u0026rsquo;s\u0026rdquo; standard. Any python code is tested for type safeness (That is declaring types is optional, but if types are declared they must be correct). The import statements in any python code are correctly ordered. If any of these tests fail or need to alter any files, the commit will fail. This prevents you from accidentally forgetting to check your changes before you commit them.\nIf you wish to run the checks in pre-commit without attempting to commit your changes:\npre-commit run --all-files There are many other possible checks available with pre-commit, which you can incorporate according to the needs of your project. The pre-commit documentation provides much more detail.\nTesting tools # Some suggested testing tools:\nA test framework pytest or the less fashionable unittest. Coverage reporting pytest-cov (a plugin for pytest) or coverage. A tool for testing code examples in your documentation doctest. This list of tools does not include a discussion on developing a testing strategy. Developing a testing strategy is a separate discussion, though it is not possible to make optimal use of these tools without a strategy.\n"},{"id":29,"href":"/REG-handbook/docs/onboarding/new_joiners/systems_set_up/","title":"Systems Set Up","section":"New Joiners","content":" Systems Set Up # These are not hand-holding instructions. Rather they are a reference to help with your setup. If they are wrong or incomplete, please edit them. The page has been roughly organised into high priority things (do in your first couple of days), low priority (sometimes in the first couple of weeks), and reference.\nIf any of the material is unfamiliar (e.g. you haven\u0026rsquo;t seen a GitHub project board before), then please ask your buddies (or anyone else you meet in the group) to have an informal chat about it.\nHigh priority # Getting a computer # Receive (or be assigned) new computer from IT. It will have an admin account for IT, and probably an account for you with a default password. Contact your line manager as a matter of urgency if you are not able to get a laptop on your first day at the Turing.\nLog in with the password provided by IT.\nChange your password.\nYour new password should be strong (12 random characters), and ideally randomly generated by a password manager. Feel free to use a diceware-style passphrase.\nYour password should be:\nunique to the machine/system randomly generated (use a password generator) have an entropy of at least 64 bits, see wikipedia At least 11 characters if alphanumeric (use 12, though) At least 10 characters if alphanumeric plus symbols At least 5 words if using dice ware At this point you can also configure fingerprint authentication.\nMake sure you have FileVault on.\nYou should be setup with local admin privileges. Contact IT if this isn\u0026rsquo;t the case.\nInstall Homebrew # We recommend using Homebrew as your Mac package manager. Currently IT installs Homebrew by default on our laptops under /usr/local/bin. However, in the long run this might create problems with the new M1 Macs we use. To see if this problem applies to you, run which brew in the terminal and check if that\u0026rsquo;s the location. Until this is fixed by IT, what we recommend is the following:\nUninstall the current version of Homebrew by running the following command in the terminal: sudo /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)\u0026quot; Install Homebrew again following the instructions on the website. This will install Homebrew under /opt/homebrew/bin/brew (you can check by entering which brew in the terminal to see the new location). Communication Channels # Most communication happens through Slack. More structured communication happens through GitHub. These two systems are the first things you should setup (once you\u0026rsquo;re on Slack it\u0026rsquo;s a lot easier to ask for help).\nSlack # Install Slack:\nbrew install --cask slack Once installed join the Turing Slack. You can self-subscribe with your @turing.ac.uk email address.\nImportant channels to join:\nYou should be added to #general and #random by default. Ask anyone in the team to add you to the private channel #hut23. If you are a senior, please ask another senior to invite you to the REG senior’s Slack channel (#line-managers). GitHub # We use GitHub for most coordination.\nTo get access to Turing GitHub, create a GitHub account (or use an existing one), and fill out this MS Form with your GitHub handle (if you have access to Turing Complete). Then let the GitHub org controller know that you have done this and they can add you straight away.\nAlso check the Project tracker to get a feeling on what goes on. We use it to track official projects we are tasked with. This is where we express preferences for projects, with emojis. Project leads should be assigned to the relevant issue and are responsible for keeping the issue up to date. Check this section of the handbook for more details.\nOffice 365 account # Your Turing main account rests here. You get access to mail (Exchange), calendar, a shared drive, Office apps. Check that you can login, and change your password and configure MFA. Ask IT if in need for help.\nLower Priority # Here we have more information about how we use the high priority systems, and also other systems to explore.\nSlack Channels # Turing is a large organisation and there are many other channels you may want to join. Some are purely social, some are related to programmes or projects. For example, #tps (for the closely aligned Tools, Practices and Systems programme), #kitchendropin, #social, #pubclub, #askaway, #research-computing, #interesting-events, #football. If you get interested in something just ask if there is a channel about it.\nAll of the REG-specific channels are prefixed with hut23, so that\u0026rsquo;s a good thing to search for in the channel list.\nYou may also want to add yourself to #hut23standup, which some of us use for automated standups of \u0026ldquo;About Us\u0026rdquo; questions. The purpose is to get to know other team members by answering a question three times a week. Geekbot should send you the next question at 10:30am on Mondays, Wednesdays and Fridays.\nTips for using Geekbot:\nYou can report before/after Geekbot asks you by sending it a message from Slack, e.g. report About Us. The Slack channels containing the responses can generate a lot of notifications. You might want to turn off notifications, or alternatively mute the channel and check in on it manually instead. (Right-click on the channel name to do this.) You can customise the time of Geekbot\u0026rsquo;s questions. Send dashboard as a message to Geekbot and click the link it returns. From there, you can select a standup and the \u0026ldquo;My preferences\u0026rdquo; button will take you to the customisation page. (This setting may not be enabled on all standups.) You can export a list of your previous responses to a standup from the dashboard. Click on the \u0026ldquo;timeline\u0026rdquo; tab of the relevant standup, and from there you can select the participants and questions to export to a csv file. This is particularly useful when you have forgotten to fill in Harvest for a while and need the information from the daily standup! Other workspaces you could join:\nThe Society of Research Software Engineering has a Slack worspace. For information about joining the Society see the SocRSE page. Mailing Lists # The Newsletters \u0026amp; Mailings page on Turing Complete has a \u0026ldquo;Update Mailing Preferences\u0026rdquo; link to sign up to receive some internal newsletters/communication.\nHarvest and Forecast # We use Harvest to (loosely) track our time, and Forecast to manage allocations to projects. Get in touch with the person in charge of researcher tool management to setup a meeting sometime in your first week.\nHarvest is a time tracking app used to monitor the amount of time being dedicated to each project. The easiest way to get set up is to ask your Line Manager or another member of the team to invite you and make you admin. You can then add yourself as a team member to whichever projects you\u0026rsquo;re working on and start tracking your time. There is a page here which goes into more detail about where you should log different activities.\nCezanne HR # Our HR system is Cezanne HR. You can log onto this with your Turing credentials using the \u0026ldquo;Enterprise login\u0026rdquo; option. If \u0026ldquo;Enterprise login\u0026rdquo; does not work, email HR to fix it.\nThis system is used for:\nRequesting annual leave. Recording days off due to illness etc.. Managing the objective setting and performance review process (after your probation period). Create a Public Profile on the Turing Website # There are several ways to do this:\nYou can fill in this form on Turing Complete to request a public profile. Alternatively, contact the people in charge of REG communications, providing the following info: Your title and full name A short personal bio A brief description of your Turing-related research (optional) A brief description of your achievements and award (optional) Photo (optional) Webpage You can also edit the website yourself directly. To do so, you must complete a round of online training, after which you will be granted edit permissions. Office 365 Groups # Make sure you are in the following Office365 / email groups (check with IT):\nResearch engineering Business team (for non-Research Associate staff) Research staff All Staff If you are a senior member of staff, ask a principal to get you added to the REG-senior-staff email list. End-of-month all business team meetings (Turing Catch-ups). These are sent out as recurring calendar events. You can either email governance to forward you the invite or find a member of the REG team that is invited and ask them to forward the invite. Turing Bulletin: This internal newsletter is sent out every Thursday evening. If you don\u0026rsquo;t receive it, you can sign up manually via Turing Complete. GitHub Pro and Professional IDEs # Turing employees can apply for free GitHub Pro accounts, and use these to get free educational licences for professional versions of many JetBrains products (e.g., PyCharm, IntelliJ, …)\nGo to education.github.com and apply for the GitHub Teacher Toolbox GitHub will ask you to verify your affiliation with an academic institution. The Turing is not on their list, but you can still use it. You will need proof of employment - a screenshot of Cezanne or the top of your Turing contract (including start date) have worked for people in the past. Once GitHub have approved your Pro account, go to the JetBrains website and create an account there (sign in via GitHub) You can now apply for a free educational licence (\u0026ldquo;Apply for a free student or teacher license\u0026rdquo;) for professional versions of various IDEs. There is no obligation to use these IDEs, this is just an FYI in case you are interested. OneDrive # Sync the Research Engineering documents: From SharePoint, under \u0026ldquo;Research Engineering\u0026rdquo; private group, go to \u0026ldquo;Documents\u0026rdquo;, then \u0026ldquo;Sync\u0026rdquo;.\nPlease avoid locally editing files that are common and might be edited concurrently. In that case, opt to use the online version through Office 365.\nHackMD # We sometimes use HackMD for shared documents. If you don\u0026rsquo;t have an account, signup for a free account here. We do not have a paid account for HackMD.\nSkype for business # We don\u0026rsquo;t use skype that often, but this can be installed through the Self Service application. You will need an application-specific password.\nIf you want a phone number ask IT.\nMathison # Mathison is the Institute\u0026rsquo;s intranet. You should have access to this on your first day. A few things still need to be done on the old intranet, Turing Complete.\nGray Dawes # Gray Dawes is the Turing\u0026rsquo;s system for booking travel and accommodation. Instructions on how to get set up can be found on Mathison.\nWhen making bookings on Gray Dawes, you will have to additionally submit an Excel approval form (available at the right-hand sidebar of the same Mathison page). This form should be filled in and sent to the Principal you have a direct link to in the line management chain for approval.\nCertify # Other work-related expenses can be reimbursed via Certify: see the Mathison page for more information on how to get set up. Briefly, you will have to fill in a Travel and Expenses Policy Compliance Form and email it to Finance. On this form, the \u0026lsquo;approver\u0026rsquo; should be the REG Director.\nThe REG Wiki contains more information on the reimbursement process, including information about the specific department and project codes you should be using. When you get access to Certify, it\u0026rsquo;s a good idea to check that you\u0026rsquo;ve been set up with the correct codes.\nIf you applied for a visa to work at the Turing, you are also allowed to claim up to £4000 back. More details on this can be found in Mathison as well as the REG Wiki.\nReference # Take a look at the following sections:\nRegular Events Common Technical Practices Equipment "},{"id":30,"href":"/REG-handbook/docs/onboarding/new_joiners/checklist/","title":"Checklist","section":"New Joiners","content":" Checklist # This page attempts to list all the things that a new starter should remember to do. It makes no guarantees of completeness, and attempts to list both compulsory things and optional ones. It has been written by new starters as they go. If you\u0026rsquo;ve recently started in REG and find yourself doing anything related to getting started, that others might want to do as well but that is not on this list, please add it. If anything is unclear, please figure it out by e.g. asking your buddies, and then clarify it here.\nMeetings # Attend buddy meeting Attend HR induction Attend IT induction Meet with line manager Shadow meetings (if you don\u0026rsquo;t have access to the HackMD, ask someone in charge of onboarding) Join in for welcome coffee(s) HR tasks # Complete Agenda screening (hopefully this happened already before you started, but if you haven\u0026rsquo;t received an email about this, ask HR) Do a bazillion things on Cezanne: Enter specific personal details, most important are: DOB Home address Emergency contact details Bank details NI Health form Additional characteristics form Complete and reupload in Cezanne documents area: “BL partners - Health, Safety and Security” form HMRC new starters form \u0026ldquo;Right to work\u0026rdquo; document Signed and dated scanned contract (can just upload the version signed with DocuSign before joining) British Library pass: \u0026ldquo;BL partners - Health, Safety and Security\u0026rdquo; form: complete and reupload in Cezanne documents area Upload photo to Documents section on Cezanne (where other starter forms are provided) HR require Agenda Screening report (no action if already completed Agenda Screening before starting) Temporary pass, line manager emails reception to request Send P45 from previous job to HR contact directly by email Read about health and dental insurance, decide whether to sign up Check the Turing Benefits site, to see if there are useful discounts there Send to HR for the next Turing Town Hall meeting: Casual photo Fun fact(s) Provide a description for the ATI webpage (https://alan-turing-institute.github.io/REG-handbook/docs/onboarding/new_joiners/systems_set_up#create-a-public-profile-on-the-turing-website) Verify your MoorePay account (for payslips). Verification email will be sent to you in your first month of employment. See Payroll and Payslip enquiries on Mathison for more information. Verify your Certify account (for expenses). The Certify Mathison page contains a Travel \u0026amp; Expenses Policy Compliance Form which has to be filled in and emailed to Finance to activate your account. GitHub and communications # Get access to private GitHub repos (fill in this form and send your GitHub username to the person responsible for GitHub (see The REGistry) to join the Alan Turing Organisation GitHub Join Turing Slack Go through public Slack channels, decide which ones to join Request account on Harvest and Forecast by asking the the person in charge of researcher tool management, or your buddies to get you set up (to clarify, it is one account but allows you sign in to both) https://alan-turing-institute.github.io/REG-handbook/docs/onboarding/new_joiners/systems_set_up#harvest-and-forecast Read through the new joiners pages of the REG handbook Have a look at REG projects on the Project tracker in the Hut23 GitHub Repo. Read through the Project Tracking page to learn how we set our preferences for projects by using emojis, and start emoji-ing for the projects in the \u0026ldquo;Finding people\u0026rdquo; and \u0026ldquo;Awaiting go/no-go\u0026rdquo; columns. Have a look at the Service areas. There is no pressure to join one right away so you can take some time talking to people and finding an area that interests you. Add the shared REG Calendar to Outlook Familiarise yourself with how to Book Rooms Message IT to upgrade Zoom account from Basic to Pro Send a short informal bio to the REG newsletter owner. Sign up for ongoing activities # Feel free to put yourself down for a tech talk (12:30 pm on Tuesdays): you can see if any open dates in the schedule work for you, and then let the person in charge of tech talks know. Read up about (and perhaps join\u0026mdash;we recommend you do!) the Society of Research Software Engineering Sign up for any of the EDI network groups which might interest you "},{"id":31,"href":"/REG-handbook/docs/technical_practices/configuring_editors/","title":"Configuring Your Editor","section":"Common Technical Practices","content":" Configuring Your Editor # Many people will configure their editor to suit their own needs and preferences.\nIt is possible to do this so that there are common standards between collaborators in the code base, while allowing for differences in individuals\u0026rsquo; configurations.\nSome of the topics discussed below are heavily focused on python development. In due course we should generalise this to cover other languages. General # Some common, particular formatting/encoding options can be configured for a range of editors/IDEs by using EditorConfig in your repo. A .editorconfig needs to be placed in the root of your repo.\nMany (but not all) editors support EditorConfig files allowing different members of your project team to use their own favourite editor while maintaining common coding standards. Some editors support EditorConfig natively; others require a plugin to support EditorConfig.\nThere is some overlap in functionality between EditorConfig and Flake8. Crudely EditorConfig applies standards to files as they are created/edited, while Flake8 checks all files (irrespective of origin) on demand.\nBoth tools need to be set up en ensure that they are mutually compatible. However, since the configurations for both Flake8 and EditorConfig rarely change after the initial setup of the project, this is not a problem in practice.\nVS code # VS Code Python documentation ARC suggested config (Turing members only) Extensions # Focusing on Python only, useful extensions include:\nPython — adds core functionality for linting/navigating/debugging/etc. Pylance Jupyter Python Indent — improves editor behaviour for matching indentation across lines autoDocstring — auto-generate template docstrings IntelliCode — improved auto-completion/code suggestions Black formatter (pre-release) — auto-format code with black isort (pre-release) — auto-format code with isort Python Type Hint — helps with completing type-hints The black and isort pre-release packages are currently designed to work with the Python pre-release version. This is likely to be consolidated/improved in the future. Settings # VS Code Settings are stored in:\nGlobal user settings: ~/Library/Application Support/Code/User/settings.json. Project-specific (Workspace) settings: \u0026lt;PROJECT_ROOT\u0026gt;/.vscode/settings.json. You can also customise most settings via the Code -\u0026gt; Preferences -\u0026gt; Settings menu. For Python specifically note the Extensions -\u0026gt; Python section.\nHere\u0026rsquo;s an example config for Python (reliant on installing the extensions above):\n{ \u0026#34;python.linting.flake8Enabled\u0026#34;: true, \u0026#34;python.linting.mypyEnabled\u0026#34;: true, \u0026#34;python.testing.pytestEnabled\u0026#34;: true, \u0026#34;python.linting.pylintEnabled\u0026#34;: true, \u0026#34;autoDocstring.docstringFormat\u0026#34;: \u0026#34;numpy\u0026#34;, \u0026#34;[python]\u0026#34;: { \u0026#34;editor.rulers\u0026#34;: [88], \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;ms-python.black-formatter\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.organizeImports\u0026#34;: true }, }, } It does the following:\nActivates linting with flake8, mypy and pylint. We suggest using flake8 at a minimum, but you may not want all three activated as it gets quite noisy and there\u0026rsquo;s some overlap between them. Sets pytest to be the default test framework. Sets numpy to be the default format for docstrings generated with autoDocstring. Sets black to be the default formatter, and automatically runs black and isort when saving a file. Adds a vertical ruler to the editor at 88 characters (default line length used by black) for Python files only. Note that:\nIt\u0026rsquo;s possible to specify arguments for the linters/formatters in settings.json. We suggest using each tool\u0026rsquo;s own configuration files (e.g. .flake8), as these will then be picked up by other tools and editors as well. (e.g. Should configure flake8 and isort to be compatible with black). If enabled tools are not installed in your Python environment VS Code should prompt you to install them. You are likely to have some non-Python specific configuration as well, so add the settings above to your settings.json file rather than overwriting it completely. Selecting the Python Interpreter # VSC Python Interpreters Docs\nFor each workspace VS Code can be configured to use a specific Python interpreter (environment). That interpreter is then used by default when doing anything with your code (running scripts, linting, tests etc.)\nTo set the interpreter:\nOpen a .py file. Click on the details of the currently used environment on the status bar (bottom right). Select an interpreter from the list that appears (or write the path to it). Or from the command palette:\nCmd-Shift-P -\u0026gt; Search for \u0026ldquo;Python: Select Interpreter\u0026rdquo;. Linting # VSC Linting Docs\nIf linters are activated (see Settings) they will be run after saving a file, and any problems the enabled tools encounter will be highlighted in-line in the editor, and be listed in the \u0026ldquo;Problems\u0026rdquo; tab of the panel at the bottom (or select View -\u0026gt; Problems from the menu).\nHovering over a piece of code with a problem in the editor will give you more details about it, and may have a \u0026ldquo;Quick Fix\u0026rdquo; available, which will edit the code for you to fix it.\nFormatting # VSC Formatting Docs\nVS code can use a few different file formatters (e.g. black, yapf, autopep8 — we recommend black), which can be configured to run automatically when saving files (see settings above) or with the following shortcuts:\nOption-Shift-F. Save the file (if auto-formatting is configured). Right-click in a Python editor -\u0026gt; Format Document. Cmd-Shift-P (Opens Command Palette) -\u0026gt; Search for \u0026ldquo;format\u0026rdquo; -\u0026gt; \u0026ldquo;Format Document\u0026rdquo;. Running Tests # VSC Testing Docs\nIf you have enabled pytest (or another framework, e.g. unittest), tests will be discovered and appear in the Testing menu (lab bottle on the left side menu).\nFrom here you can run all/individual tests. You can also search for \u0026ldquo;Tests\u0026rdquo; in the command palette (Cmd-Shift-P) to find options for running tests. If a test fails, clicking on it will show the error message. You can also debug tests (see debugging).\nIf you have a tests file open in an editor the latest pass/fail status of a test will be shown (or a play button if the test hasn\u0026rsquo;t run before) — running tests can be triggered from there too.\nDebugging # VSC Debugging Docs\nOther Tips and Tricks # Auto-import: If you start typing a function name that hasn\u0026rsquo;t been imported, VS Code will pop up a list of suggested functions and \u0026ldquo;Auto-Import\u0026rdquo; them (add an import statement to the top of the script) if you select one of them. Rename symbol: Right-clicking on a (variable/function/class/etc.) name in a file, selecting \u0026ldquo;Rename symbol\u0026rdquo;, and entering a new name will change the name of all instances of that across your codebase (but respecting the scope of the renamed entity). Jupyter: The Python extension comes with a Jupyter extension so you can run and edit notebooks in VS Code. Personally, I prefer the native Jupyter notebook/lab interface to the VS Code one. AutoDocstring: If the AutoDocstring extension is installed, typing \u0026quot;\u0026quot;\u0026quot; then hitting enter will generate a template docstring for you containing placeholders for all arguments (including their types if type hints are used in the function definition). Go to definition: Right-clicking on a (variable/function/class/etc.) name and selecting \u0026ldquo;Go to definition\u0026rdquo; will take you to where that thing is defined in the codebase. Git: The editor highlights modifications to the code (by the line numbers), and you can also commit etc. from VS Code using the Source Control menu on the left. Docker: There are extensions (1, 2) for running code in containers/attaching a VS code window to a container. "},{"id":32,"href":"/REG-handbook/docs/contributing/editing_a_page/","title":"Editing a Page","section":"Contributing","content":" Editing a Page # If you followed the instructions in the Getting Started section to checkout the repository and serve the handbook locally you can edit a page locally. However, as you may have noticed, at the bottom of each page is a link to edit the page in the GitHub web editor if you would prefer. This may be easy for making small changes.\nPages # Each page is a Markdown file with YAML front matter followed by the page contents in Markdown.\nFront Matter # The front matter is used to define various pieces of metadata related to a page. The front matter appears at the top of a content file. In the handbook we format front matter as YAML, preceded and followed by three hyphens.\n--- title: \u0026#34;Example Page\u0026#34; weight: 1 --- The full YAML specification is long and comprehensive. The most important thing to understand here is that the front matter YAML consists of keys and values separated by a hyphen. For example, in the expression weight: 1, weight is the key with a value of 1.\nIf you created a page using hugo new then some boilerplate front matter with explanatory comments should already be present. If you are editing an existing page there should already be front matter.\nMost of the time, the only keys you will need to consider are title and weight.\ntitle The title of a page as it appears in the navigation menu weight Determines the order of pages in the navigation menu. Smaller numbers appear first The Hugo documentation details a set of predefined front matter keys. Other valid fields related to the handbook theme are documented in the theme\u0026rsquo;s README.\nContent # After the front matter is the content section.\n--- title: \u0026#34;Example Page\u0026#34; weight: 1 --- | content section | The content section is formatted in Markdown. The following links from Markdown Guide describe basic and extended Markdown syntax.\nNot all of the extended Markdown syntax may be implemented by Hugo\u0026rsquo;s Markdown renderer. Shortcodes # Shortcodes are templates (which can be parametrised) and included the content section. They can be particularly useful for including more complex features than Markdown\u0026rsquo;s simple syntax will allow. Using a shortcode is preferable to including raw HTML in a content file.\nShortcodes can called in Markdown content files the following way\n{{% shortcode parameter %}} Some shortcodes may have an opening and closing tag, similar to HTML\n{{% shortcode %}} content to process {{% /shortcode %}} Hugo Shortcodes # Hugo has a set of useful built-in shortcodes.\nIn particular\nfigure gist highlight param ref and relref Theme Shortcodes # The theme has a number of shortcodes which may be helpful.\nIn particular\nhints expand KaTeX tabs Repository Shortcodes # Shortcodes can be included in the handbooks repository. For more information see Creating Shortcodes\nrepo_link # Create a link to a file or directory in the handbook\u0026rsquo;s repository.\n{{% repo_link path=\u0026#34;README.md\u0026#34; text=\u0026#34;README\u0026#34; %}} path Path to the file or directory relative to the root of the repository text Text of the link (can include Markdown formatting) "},{"id":33,"href":"/REG-handbook/docs/how_we_work/","title":"How we work","section":"Docs","content":" How We Work # "},{"id":34,"href":"/REG-handbook/docs/working_at_the_turing/wellbeing/","title":"Wellbeing","section":"Working at The Turing","content":" Wellbeing # The Turing provides a number of support mechanisms to protect employees\u0026rsquo; wellbeing.\nThe most up-to-date information can be found on Mathison. A summary follows here:\nReport + Support # Report + Support is an online platform where you can report cases of bullying, harassment, discrimination, assault, hate crime, sexual misconduct, or a breach of the Turing\u0026rsquo;s values (Trust, Inclusivity, Respect, Leadership, Transparency, Integrity). Reports can be made anonymously if you so choose.\nCare first # All employees at the Turing can access the Care first employee assistance programme. This includes a 24-hour phone counselling service, online counselling, and advice services. Contact details and links are available on the Mathison page.\nThe employee assistance programme also provides access to the \u0026lsquo;My Possible Self\u0026rsquo; app for monitoring and improving mental health.\nPrivate medical / dental insurance # The Turing provides a private medical insurance plan from Bupa. You have to opt in: if you want to sign up, contact HR with the information requested on the above Mathison page. You can choose to have either the medical insurance with or without the dental plan.\nThe cost of the medical insurance itself is covered by the Turing, but you have to pay for the first £100 of treatment (this is called the \u0026rsquo;excess\u0026rsquo;), and because this is a taxable benefit you also have to pay tax on the cost of the medical insurance. The dental plan add-on has an annual flat rate charge.\nIt is worth noting that the medical insurance includes cover for pre-existing conditions, as well as mental health, which means that you can use it to access therapy with counsellors or psychologists. You can use the Bupa finder to search for recognised medical professionals.\nMental health first aiders # There are a number of mental health first aiders in the Turing whom you can speak to and who can help you obtain support. A full list can be obtained on Mathison. (Unfortunately, this does not yet include anyone in REG.)\nExternal supervision # All Turing staff have access to individual, once-per-month sessions with an external supervisor, Debbie Dixon. External supervision is meant to provide participants with techniques and methods to navigate difficult situations, particularly at work. However, it is not a form of therapy and should not be seen as a replacement for that.\nFree Headspace membership # Headspace is an app for mindfulness and meditation. The Turing is a Headspace partner, meaning that all employees can access free membership to Headspace. You can also add 5 other people to your membership for free. Instructions on how to access the Turing subscription can be found on the Mathison link above.\n"},{"id":35,"href":"/REG-handbook/docs/contributing/contributing_changes/","title":"Contributing Changes","section":"Contributing","content":" Contributing Changes # Once you have made changes, you will need to contribute them back to the remote repository. This page explains the process of pushing your changes back to the remote, and how your contribution will be checked in the CI and review process.\nThe handbook uses the GitHub flow workflow. In short:\ncreate a branch make changes open pull request review merge to main This workflow should help changes be deployed quickly.\nCreating a Branch # You should make your changes on a new branch, and not on main. This will make it easier to merge changes from many contributors. Try to pick a branch name which is short and describes the change you are making.\nThe changes on one branch or pull request should address a single issue and be self-contained. Don\u0026rsquo;t try to solve more than one unrelated problem at once.\nSticking to this practice will help ensure pull requests are small and easy to review. Otherwise, you might end up having to make many changes during review, have difficultly keeping your branch up to date or upset the reviewers.\nMaking Changes # At this point, you can edit files and create git commits as necessary.\nWhen making commits, it is a good idea to follow Tim Pope\u0026rsquo;s recommendations for good commit messages. It is often useful to run the Markdown style checker (and other tests) before committing. This allows you to catch, and fix, potential issues before opening a pull request. To do so, use the pre-commit tool: the website contains installation instructions if you have not used it before. After installing pre-commit, navigate to the repository root and run:\npre-commit install This uses the .pre-commit-config.yaml file in the repository to create a pre-commit Git hook, which (as the name suggests) will be automatically run every time before a commit is created. It currently performs the following checks, which are designed to mimic those in Continuous Integration:\nMarkdown linting A Hugo build, to make sure that the pages can be built If you want to manually perform these checks at any point in time, the following will check all files that have changed since the last commit:\npre-commit run To check all files, regardless of their changed status:\npre-commit run --all-files Opening a Pull Request # When you think your changes are ready to be merged, open a pull request. If you don\u0026rsquo;t want your changes to be merged yet but would like some feedback, you can open a draft pull request.\nWhen you open a pull request you will be presented with a template. Complete the sections and answer the questions as best you can. In particular, make sure to reference any issues your work closes or is related to.\nContinuous Integration # A series of tests are automatically conducted on each commit pushed to GitHub, as well as each pull request. The tests are defined in ci.yaml .\nThe following tests are required to pass before merging a pull request:\nA Markdown linter A Hugo build There are other tests that are not required for merging, although you should aim to pass all tests. Those are:\nA Markdown link checker A HTML proofer (including link checking) on the output of Hugo Keeping Your Branch up to Date # The branch protection rules applied to main will prevent out-of-date branches from being merged. This means if your branch doesn\u0026rsquo;t include the changes from the HEAD of origin/main, it won\u0026rsquo;t be possible to merge it.\nIf your branch isn\u0026rsquo;t up to date, you can fix it with a merge or rebase.\nMerging # Merging the changes from origin/main is probably the simpler way to get your branch up to date. It will leave the Git history a bit messier which can bother some people.\nEnsure you have the latest changes on origin/main in your local repository\ngit fetch Merge origin/main into your branch. If your branch was called my_branch you would run\ngit switch my_branch git merge origin/main Git will notify you of any conflicts. If there are conflicts, you should fix them before running git merge --continue to commit. After you are done, you can push your changes.\nRebasing # Rebasing your branch on top of origin/main can make conflicts more difficult or confusing to deal with, but leads to a more linear Git history..\nEnsure you have the latest changes on origin/main in your local repository\ngit fetch Apply your commits on top of origin/main. If your branch was called my_branch you would run\ngit switch my_branch git rebase origin/main If you want to tidy up your commits or messages you might want to use an interactive rebase: git rebase -i origin/main.\nGit will notify you of any conflicts. If there are conflicts you will need to fix them iteratively, running git rebase --continue to apply each commit.\nWhen the rebase is done, you will need to force-push your changes as you have rewritten the history of your branch.\ngit push -f Rewriting history is considered impolite on a branch where you are working collaboratively. It can cause problems when the state of a remote changes unexpectedly. The Review Process # Currently, reviews are not required and pull requests may be merged by anyone with write access once all required CI checks pass. If you like, you can enable auto-merge so that the merge happens automatically when this is the case.\nHowever, if you\u0026rsquo;d like your changes reviewed you can suggest reviewers when, or after, opening your pull request. If a reviewer then requests any changes or makes any comments, these should be resolved before the pull request is merged.\n"},{"id":36,"href":"/REG-handbook/docs/how_we_work/line-management/","title":"Line Management","section":"How we work","content":" Line Management # Line management in REG is a little different than in other parts of the Turing as you often will not be working directly with the people you are managing. This guide aims to explain how this relationship might work.\nHow line management duties are assigned # At (current) senior level, people are expected to line manage 1-2 standards. This will probably change with the new lead role (see the REG role matrix). Currently, if seniors are willing to line manage more than 2 people, they should inform the recruitment lead (can be found in service areas).\nAt standard level, opportunities for line management and project mentoring of junior members and interns are offered during the year. To assign such duties, we follow whenever possible time spent at standard level in REG.\nAt both levels, we try to avoid overlaps between projects and line management, at least during probation.\nFirst day # As a line manager you will have a 1-to-1 meeting with the person you will be managing on their first day. By this point they will have had various other inductions (eg. with HR, IT, their REG buddies). You might want to focus on the following points\nintroduce what line management is at REG part mentor, part escalation point, part pastoral support, part admin, can take different shapes depending on need \u0026hellip; and what it is isn’t task-setting, boss vibes, oversight point out that line management, like everything else in REG, is a collaboration have a chat about what management styles have worked well for them. find out their background, why they decided to join the group discuss what their day-to-day might look like 80% projects (either one or two projects) 10% REG responsibilities (eg. service areas) 10% personal development briefly talk about how people are allocated to projects check that they\u0026rsquo;ve taken a look at the new starters checklist leave time for questions First week # Later in the first week you might want to go through some of the more technical points:\nTeam reporting structure Adding yourself to the Turing GitHub organisation Emoji reacting to projects Projects looking for people Currently active projects Project allocations on Forecast Personal time tracking on Harvest (noting that this is not compulsory) Probation formalities "},{"id":37,"href":"/REG-handbook/docs/technical_practices/software_dev_best_practice/","title":"Software Development","section":"Common Technical Practices","content":" Software Development Best Practices # Status: this document is a draft proposal.\nRSE projects # There should be a GitHub issue for each thing we do. It’s ok for issues to evolve and my preference would be that the top description box always has the most up to date, clearest description of the issue and its definition of done. Feel free to make liberal use of the comments for communication and tracking investigative / exploratory work. The main description box should contain a clear definition of done / acceptance criteria sufficient for the following to be done in principle by different people from the team who are involved in the project.\nImplement the functionality Write tests to validate the implementation meets the definition of done Review the implementation for correctness All code should have automated tests, with all tests runnable by a single command by someone who has checked out a fresh copy of the repo.\nAll dependencies, installation, compilation etc should be scripted such that these can be triggered by a single command by someone who has checked out a fresh copy of the repo. Dependencies required only for testing can require a second command or few.\nEach new issue should be developed on a short-lived feature branch split from \u0026ldquo;main\u0026rdquo;. These branches ideally only live around 0.5-2 days before being merged back into main. Merge process should be: merge main into feature branch and resolve any conflicts. Push latest feature branch to GitHub. Open PR to merge into main after review + continuous integration (CI) tests.\nCode should be committed regularly in small chunks. You should generally be committing multiple times per day. Commits on feature branches can have broken functionality or tests, but all merges into main should only occur at commits where the code is correct and has passing tests.\nAll code commits should be accompanied by tests verifying it behaves as expected. At a minimum code submitted as a PR should have tests that show it meets the definition of done defined in the related issue(s). However, code should have additional unit / regression / integration tests where appropriate (it\u0026rsquo;s almost always appropriate). Writing code then tests is a significantly lower quality assurance measure than writing tests first / in iteration with the code, so you should do the latter.\nAll code should have had two eyeballs on it before it is merged into main, either through pair programming or code review within the PR. Please note on the PR who two eyes were. The second pair of eyes can be anyone on the project (not just a coder), anyone in our team or someone from a related team (e.g. the UCL research programming). Whether as pair programming or a code review, the final PR code should be validated against the definition of done detailed in the related issue(s) by the two pairs of eyes.\nThe GitHub repository should be set up to run all tests on all pushes to all branches and on all PRs. Currently this can be done for public repos via GitHub Actions. If CI is set up this way, commits to main should be blocked unless all tests pass.\nData Science projects # TBD\n"},{"id":38,"href":"/REG-handbook/docs/working_at_the_turing/","title":"Working at The Turing","section":"Docs","content":" Working at The Turing # "},{"id":39,"href":"/REG-handbook/docs/technical_practices/","title":"Common Technical Practices","section":"Docs","content":" Common Technical Practices # This section contains a section of common technical practices within REG. For many of the topics in this section, there may be many possible ways to achieve the same goal — which are debated at length elsewhere. The intention of this section is not to claim that any of the methods here are the \u0026ldquo;best\u0026rdquo; (however defined). Merely that they are good enough to allow the reader to focus on other, more interesting, unique or important, aspects of their project.\n"},{"id":40,"href":"/REG-handbook/docs/contributing/reviewing_changes/","title":"Reviewing Changes","section":"Contributing","content":" Reviewing Changes # The review process helps to ensure high quality and catch problems in contributions. When acting as a reviewer, you should see your position as sharing your knowledge and working with the contributors to achieve the best possible result. Reviewing should not be an adversarial process.\nRecognising Contributions # When reviewing a pull request you should try to make sure everyone\u0026rsquo;s work is recognised. See the Recognising Contributions page for how to do this.\nCode Quality # As a reviewer, one of your jobs is to ensure the quality of the codebase remains high.\nThe CI process will help to assess pull requests by subjecting each commit to a series of tests. Some tests are required to pass and will block merging until they do.\nOther tests are allowed to fail. This is because these tests check external hyperlinks which can fail for reasons out of our control: for example, a website being offline, or an API rate limit. However, you should always aim to have all tests passing and investigate why any test fails. In particular, a genuinely incorrect link should not be ignored.\nYou should always clone the branch, build the handbook locally (using hugo server --minify) and inspect the changes using your browser. Not all bugs will be caught by CI and not all changes will be obvious in the source files.\nReviewing the Pull Request # Use the GitHub review system to check the diffs of all source files.\nYou should make use of line comments where you have comments or questions about particular lines of sections. This gives context so that everyone knows where the problem is or what the question refers to.\nLine comments can also be used to suggest changes (using the ± button). You should do this when you have a simple solution. This is an excellent way to share knowledge.\nWhen you are finished, submit your review, making sure to choose \u0026ldquo;comment\u0026rdquo;, \u0026ldquo;approve\u0026rdquo; or \u0026ldquo;request changes\u0026rdquo; as appropriate.\nChanges # If you request changes, the pull request will enter an iterative process where the contributors make adjustments you repeat the review process.\nThe contributors may accept your proposed changes, make their own changes or push back against changes. All of these may be appropriate. It is important to work together with the contributors to resolve any conversations. All conversations must be resolved before merging.\nMerging # Update your review status to \u0026ldquo;approve\u0026rdquo; when you are happy with the state of the pull request. When all reviewers are satisfied, merge the pull request.\n"},{"id":41,"href":"/REG-handbook/docs/contributing/advanced/","title":"Advanced","section":"Contributing","content":" Advanced # Using Data # Through using templates Hugo can build page content from datafiles. This is particularly useful for when you want to display structured data in a page and when it would be easier to maintain a datafile rather than a Markdown or HTML document.\nCreating Shortcodes # It is possible to create your own shortcodes. These should be placed in layouts/shortcodes/ .\nIf you feel the need to use HTML or want to create page content from a datafile (like a YAML file or csv) then a shortcode is probably the right answer.\nYou should refer to Hugo\u0026rsquo;s templates and functions documentation for resources to help writing a shortcode.\nPartial Templates # Whole page templates are built from of a number of smaller partial templates. This approach reduces repeated code in templates and help keep making changes simple.\nThe theme defines a number of dummy partial templates for us to overwrite.\nFor example, the Creative Commons notice at the bottom of each page was added by editing layouts/partial/docs/inject/footer.html .\n"},{"id":42,"href":"/REG-handbook/docs/communications/","title":"Communications","section":"Docs","content":" Communications # "},{"id":43,"href":"/REG-handbook/docs/how_we_work/open_access/","title":"Publishing Open Access Journal Articles","section":"How we work","content":" Open Access Journal Articles # The Turing has access to a block grant to cover open access charges for journal publications for UKRI funded projects if there are not already funds in the project-specific grant to cover them. If you have published an article, you may be able to cover the open access fees using this funding source. See Open Access Publishing - Funding on Mathison for further information.\n"},{"id":44,"href":"/REG-handbook/docs/how_we_work/remote_working/","title":"Remote Working","section":"How we work","content":" Remote Working # Information and tips and tricks on working from home and other remote working.\nMeetings, calls and screen sharing # Gather # REG uses Gather for some of the coffee breaks and social events. It gives a virtual space (modelled on the office!) to wander around and have conversations with people near to you.\nSee The REGistry for how to gain entry to gather. Note: Gather is blocked on the Turing VPN and on IT-managed computers.\nZoom # Unless requested from IT, you will have a \u0026ldquo;Basic\u0026rdquo; Zoom account. This allows you to create meetings for up to 40 minutes (unlimited for meetings with only 2 people). For meetings longer than this, an upgrade to a \u0026ldquo;Pro\u0026rdquo; account is needed. To request a pro account contact IT Services.\nWe have a persistent REG Zoom meeting room, which we use for things like coffee breaks, tech talks and co-working. See The REGistry for the location.\nFor larger events or meetings, Zoom also has some features for Webinars and breakout rooms.\nZoom Rooms (like those associated with each meeting room in the office) are persistent virtual meeting spaces. Additional rooms might be able to be requested from IT if required (these seem to be priced at £32/month, so some justification should be given).\nFor more information on how to get or use Zoom, see the Zoom TopDesk page.\nTeams # Note: We mostly use Zoom for meetings and Slack for messaging in REG, but others at the Turing use Teams more heavily (e.g. the business team), and some projects have meetings there.\nGet it from the Microsoft site. There is also a mobile app. Make calls, group calls and share screen straightforwardly within the app. You can find your VoIP number by looking at your \u0026ldquo;My Office profile\u0026rdquo; (office.com, then click your profile picture). Ask IT for one if you don\u0026rsquo;t have one. Calls to this number will ring in the Teams app. Some notes on using Teams # Teams has several ways to share text and/or live voice and video with others:\ncalls chats meetings Calls and chats are between you and one or more of your \u0026ldquo;contacts\u0026rdquo;. You can put your contacts into \u0026ldquo;groups\u0026rdquo;, which are distinct from \u0026ldquo;teams\u0026rdquo;.\nThe most versatile option is a meeting. The way to make one of these in the Teams app is on the calendar tab (obviously!). It must be associated with a calendar event, and can be joined by people who are invited or by sharing a link. The meeting itself has a chat associated with it. It exists before and after the duration of the meeting, so can be used to set up persistent meeting spaces.\nWellbeing tips for remote working # Remote working brings different challenges. The work-life boundaries are less clear and some people struggle with lack of connection. Here we collate tips that the group has found to positively impact their wellbeing while working remotely. At the beginning of the COVID-19 lockdowns, having wellbeing tips proved really useful, see below: For more information on Wellbeing in REG, see the Wellbeing page.\nDelineate the start and end of the working day. A huge challenge is separating the working day from life outside of work, especially if both happen in the same location. Suggestions that might help bound work to working hours: Simulate a commute to allow your brain to switch off. For example, go for a 20 minute walk, run, or read a book. Have separate work clothes and non-work clothes. Tidy your laptop/screen away if you are using the same space for relaxation. If possible use a different device for leisure activity to your work machine. Finish on time. Without the impetus of having colleagues around you clocking off it seems easy to work later than usual and eat into your relaxation time. Take a 1hr lunch break, and finish on time. If you are finding that you are repeatedly doing this then there is an issue with your workload that needs to be corrected. Reach out! Talk. Many of us have missed the casual connection you get with being around people, and when you are working alone it is easy to forget the you are part of a team. This point is just a reminder that you work in a team that genuinely cares about the wellbeing of every member of the group. "},{"id":45,"href":"/REG-handbook/docs/regular_events/lunchtime_tech_talks/","title":"Lunchtime Tech Talks","section":"Regular Events","content":" Lunchtime Tech Talks # The Research Engineering team meets for Lunchtime Tech Talks most Tuesdays over lunch. The talks start at 12:30.\nAt a tech talk someone (usually someone in REG) presents or discusses something, such as about a project or data science/computer science/software engineering topic. They can also be opportunities to look for help and input. We encourage talks at the beginning of projects (before it\u0026rsquo;s certain what exactly you\u0026rsquo;ll be doing) or to discuss a problem you\u0026rsquo;re unsure how to solve. We also have shorter format lightning talks, where several people give a shorter talk.\nThe Data Science Skills wiki contains the talks schedule, calendar invitation instructions and information on signing up for a talk.\n"},{"id":46,"href":"/REG-handbook/docs/regular_events/lightning_talks/","title":"Lightning Talks","section":"Regular Events","content":" Lightning Talks # Lightning Talks are a meeting series within the tech talk slots in which people give short 10 minute talks. The main goals are to:\nRegularly share what we\u0026rsquo;re working on. Find overlaps between projects or problems someone else in the team could help with. Generate ideas for future tech talks. Do all this without a big time commitment, both for presenters and attendees. The talks can be on any topic, including but not limited to:\nA project (including one that hasn\u0026rsquo;t started yet). A tool or technique you use. Something you\u0026rsquo;d like help with. Informal talks or discussions without slides or much preparation are encouraged and very welcome!\nTalk Format # Each slot will be 10 minutes with a few minutes after for questions. We will be fairly strict with time to make sure everyone on the agenda gets to present.\nYou can choose whatever format you like (slides, markdown, notebook, freestyle…), but remember that it\u0026rsquo;s a short slot which lends itself to concise, high-level overviews of a topic. For example, if your talk is on a project you may wish to cover the following:\nBackground: The domain area, context, problem etc.. Goals: What are the aims of the project? Status: What\u0026rsquo;s been done so far, example results (if any). Tools \u0026amp; Techniques: What you\u0026rsquo;re using, what you\u0026rsquo;ve learnt, what you\u0026rsquo;d like help with. Summary: who\u0026rsquo;s working on the project, dates, GitHub link etc.. If you\u0026rsquo;d like to prepare slides, there\u0026rsquo;s a PowerPoint template and examples from previous talks under here that can help you get started.\nSign Up # To sign up to present a Lightning Talk, please add yourself to the signup list\nPrevious Talks # You can find a list of previous talks and their slides here.\n"},{"id":47,"href":"/REG-handbook/docs/regular_events/reading_groups/","title":"Reading Groups","section":"Regular Events","content":" Reading Groups # As part of projects or for general interest, members of the team create reading groups to learn about a topic. Reading groups may meet on weekly basis to discuss a chapter from a book, a paper, or to work together on implementing something.\nA list of current reading groups and information about them can be found on the Data Science Skills wiki.\nMaterial for the reading groups is stored in the Data Science Skills repository\nThere are also Turing Interest Groups and many other informal groups around the Turing.\n"},{"id":48,"href":"/REG-handbook/docs/regular_events/open_source_hacksessions/","title":"Open Source Hacksessions","section":"Regular Events","content":" Open Source Hacksessions # REG runs monthly sessions where we come together and contribute to upstream open-source repositories. The idea is to fence off time dedicated to contributing upstream and to do it together for joy and sociality. We hope to give back to many of the tools we use and learn about new packages by helping them out. Everyone is welcome to come and work on something they want to contribute to or join an effort someone else has already started.\nThe sessions take place from 2-5 pm every third Friday of the month and are organised by REG’s Open Source Service Area. If you have any questions, or want to join but don\u0026rsquo;t have the calendar invite you can contact them by email or on Slack (#open-source-hacksessions). If you come to an OS hacksession and end up opening a PR or otherwise making a contribution please tell us about it, either on Slack or by email.\nYou can check the list of contributions these hacksessions have led to so far here.\n"},{"id":49,"href":"/REG-handbook/docs/regular_events/drop-in_sessions/","title":"Drop-in Sessions","section":"Regular Events","content":" Drop-in Sessions # The group runs regular, informal, community-led sessions for students and researchers. Whether you have general questions on a topic, or are seeking specific technical guidance on, or just want to chat with friendly faces, our drop-in session is the perfect place for you! The sessions offer a friendly, welcoming, non-judgemental environment to receive advice or assistance without concern about being judged on technical knowledge, expertise or understanding.\nAs our organisers and helpers know, many of us working with software in the research community have been trained in domains where computing has not traditionally been a key element. There can be lots to learn in terms of new jargon and technical skills and we all have to start somewhere.\nA few examples of what we can help out with are:\nGeneral programming problems, including: Identifying and fixing bugs Setting up Python packages and environments Cloud computing questions, including: How to get started on Microsoft Azure How to deploy code to the cloud Cloud computing and storage costs Getting access to GPU VMs on Microsoft Azure Research Data Science issues, including: Data collection and selection process Experimental design (methods, baselines, metrics, ablation studies) Moving from a general idea to a machine learning pipeline Software sustainability Best practices for testing, managing and packaging your code Reproducible research Ensuring software is developed to support long-term reproducibility Including techniques for packaging and archiving code and data High Performance Computing (HPC) support: HPC services resources available at the Turing HPC performance (parallellism, libraries, compilers) Joining sessions # Our sessions are on Zoom and sometimes hybrid. We run several sessions a week (typically on Tuesdays and Wednesdays), so please see our schedule on the REG wiki. Also feel free to reach out to either Ryan Chan, Iain Stenson or Fede Nanni on Slack.\nOn the schedule, you can see who is hosting the session and a short bio about them.\nFeel free to message the organisers ahead of time with your problem on Slack, or just come by! There is no need to register in advance.\n"},{"id":50,"href":"/REG-handbook/docs/regular_events/coffee_chats/","title":"Randomised Coffee Chats","section":"Regular Events","content":" Randomised Coffee Chats # Approximately every 2 weeks, we partition REG into groups of 4 or 5 for informal chats. The groups are randomly generated (see the code here) but generally try to ensure that everyone meets different people each week.\nIf you have not signed up already and would like to join (or conversely if you would like to opt out), please inform the people in charge of the random coffees.\nSeveral years ago, during the periods of lockdown, we used to have daily coffee chats at 08:45 and 13:45. These are very rarely used nowadays but the vestiges of these can still be seen in (for example) the daily notifications on Slack every morning. "},{"id":51,"href":"/REG-handbook/docs/contributing/","title":"Contributing","section":"Docs","content":" Contributing # This section contains a guide for contributing to the handbook. It is not a comprehensive guide to Hugo or any of the other tools used. Instead it is aimed to be a user-focused guide explaining how add to or edit the handbook without dwelling on the details of the underlying technologies. For those interested in learning more, links will be liberally placed throughout for further reading.\n"},{"id":52,"href":"/REG-handbook/docs/join_us/","title":"Join Us","section":"Docs","content":" Join Us # This section contains information about our recruitment process and what it\u0026rsquo;s like to work with us.\n"},{"id":53,"href":"/REG-handbook/docs/how_we_work/acronyms_and_abbreviations/","title":"Acronyms and Abbreviations","section":"How we work","content":" Acronyms and Abbreviations # AIDA: Artificial Intelligence for Data Analytics\nALOGIT: name of a Fortran package (see issue)\nASG: AI for Science and Government (the new name of the EPSRC funds from SPF)\nARC: Applied Research Centre / Australian Research Council\nBL: British Library\nBPT: Bayesian Performance Tuning\nChrono: Chronotopic Cartographies\nCPD: Change-point detection (method to apply to data in AIDA-Lloyds project)\nCT: Computerised Tomography\nDAS: Data Availability Statements (Giovanni\u0026rsquo;s 22-days research paper)\nDAFNI: Data \u0026amp; Analytics Facility for National Infrastructure\nDC: Detector-Checker\nD\u0026amp;S: Defence and Security (Programme)\nDS\u0026amp;DH: Data Science \u0026amp; Digital Humanities (Special Interest Group)\nDSB: Data Science Benchmarking\nDS for SD: Data Science for Sustainable Development\nDSG: Data Study Group\nDSSG: Data Science for Social Good\nDSSH: Data Science for Science and the Humanities (Programme)\nEDS: Economic Data Science\nEOM: End of message\nFTE: Full Time Equivalent\nGUARD: Global Urban Analytics for Resilient Defence\nHPC: High Performance Computing\nIAG: International Airlines Group (British Airways merged with Iberia to form IAG)\nKF: Knowledge Flows\nLwM: Living with Machines\nNATS: National Air Traffic Services\nOpenMP: Open Multi-Processing\nPDQ: Proof-Driven Query\nPFEA: Probabilistic Finite Element Analysis\nRCP: Research Computing Platforms\nRCWG: Research Computing Working Group\nRDA: Research Data Alliance\nRDS: Research Data Scientist\nREG: Research Engineering Group\nRepRes: Reproducible Research\nRSD: Research Software Development\nRSE: Research Software Engineer(ing)\nSHEEP: SHEEP is a Homomorphic Encryption Evaluation Platform\nSPF: Strategic Priorities Fund (see also ASG)\nTDA: Topological Data Analysis\nTPS: Tools, Practices, and Systems\nTMF: Toyota Mobility Foundation\nTNA: The National Archives\nTTW: The Turing Way\nUQBB: Uncertainty Quantification for Black Box Computational Models\nUQM^3: Uncertainty Quantification in Multi-scale, Multi-physics Models\nWFH: Working from home\n"}]